/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TokenSwapMetaLiquidity struct for TokenSwapMetaLiquidity
type TokenSwapMetaLiquidity struct {
	Total *float32 `json:"total,omitempty"`
	UsdTokenA *float32 `json:"usdTokenA,omitempty"`
	UsdTokenB *float32 `json:"usdTokenB,omitempty"`
	NativeTokenA *Amount `json:"nativeTokenA,omitempty"`
	NativeTokenB *Amount `json:"nativeTokenB,omitempty"`
}

// NewTokenSwapMetaLiquidity instantiates a new TokenSwapMetaLiquidity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenSwapMetaLiquidity() *TokenSwapMetaLiquidity {
	this := TokenSwapMetaLiquidity{}
	return &this
}

// NewTokenSwapMetaLiquidityWithDefaults instantiates a new TokenSwapMetaLiquidity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenSwapMetaLiquidityWithDefaults() *TokenSwapMetaLiquidity {
	this := TokenSwapMetaLiquidity{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *TokenSwapMetaLiquidity) GetTotal() float32 {
	if o == nil || o.Total == nil {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenSwapMetaLiquidity) GetTotalOk() (*float32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *TokenSwapMetaLiquidity) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *TokenSwapMetaLiquidity) SetTotal(v float32) {
	o.Total = &v
}

// GetUsdTokenA returns the UsdTokenA field value if set, zero value otherwise.
func (o *TokenSwapMetaLiquidity) GetUsdTokenA() float32 {
	if o == nil || o.UsdTokenA == nil {
		var ret float32
		return ret
	}
	return *o.UsdTokenA
}

// GetUsdTokenAOk returns a tuple with the UsdTokenA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenSwapMetaLiquidity) GetUsdTokenAOk() (*float32, bool) {
	if o == nil || o.UsdTokenA == nil {
		return nil, false
	}
	return o.UsdTokenA, true
}

// HasUsdTokenA returns a boolean if a field has been set.
func (o *TokenSwapMetaLiquidity) HasUsdTokenA() bool {
	if o != nil && o.UsdTokenA != nil {
		return true
	}

	return false
}

// SetUsdTokenA gets a reference to the given float32 and assigns it to the UsdTokenA field.
func (o *TokenSwapMetaLiquidity) SetUsdTokenA(v float32) {
	o.UsdTokenA = &v
}

// GetUsdTokenB returns the UsdTokenB field value if set, zero value otherwise.
func (o *TokenSwapMetaLiquidity) GetUsdTokenB() float32 {
	if o == nil || o.UsdTokenB == nil {
		var ret float32
		return ret
	}
	return *o.UsdTokenB
}

// GetUsdTokenBOk returns a tuple with the UsdTokenB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenSwapMetaLiquidity) GetUsdTokenBOk() (*float32, bool) {
	if o == nil || o.UsdTokenB == nil {
		return nil, false
	}
	return o.UsdTokenB, true
}

// HasUsdTokenB returns a boolean if a field has been set.
func (o *TokenSwapMetaLiquidity) HasUsdTokenB() bool {
	if o != nil && o.UsdTokenB != nil {
		return true
	}

	return false
}

// SetUsdTokenB gets a reference to the given float32 and assigns it to the UsdTokenB field.
func (o *TokenSwapMetaLiquidity) SetUsdTokenB(v float32) {
	o.UsdTokenB = &v
}

// GetNativeTokenA returns the NativeTokenA field value if set, zero value otherwise.
func (o *TokenSwapMetaLiquidity) GetNativeTokenA() Amount {
	if o == nil || o.NativeTokenA == nil {
		var ret Amount
		return ret
	}
	return *o.NativeTokenA
}

// GetNativeTokenAOk returns a tuple with the NativeTokenA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenSwapMetaLiquidity) GetNativeTokenAOk() (*Amount, bool) {
	if o == nil || o.NativeTokenA == nil {
		return nil, false
	}
	return o.NativeTokenA, true
}

// HasNativeTokenA returns a boolean if a field has been set.
func (o *TokenSwapMetaLiquidity) HasNativeTokenA() bool {
	if o != nil && o.NativeTokenA != nil {
		return true
	}

	return false
}

// SetNativeTokenA gets a reference to the given Amount and assigns it to the NativeTokenA field.
func (o *TokenSwapMetaLiquidity) SetNativeTokenA(v Amount) {
	o.NativeTokenA = &v
}

// GetNativeTokenB returns the NativeTokenB field value if set, zero value otherwise.
func (o *TokenSwapMetaLiquidity) GetNativeTokenB() Amount {
	if o == nil || o.NativeTokenB == nil {
		var ret Amount
		return ret
	}
	return *o.NativeTokenB
}

// GetNativeTokenBOk returns a tuple with the NativeTokenB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenSwapMetaLiquidity) GetNativeTokenBOk() (*Amount, bool) {
	if o == nil || o.NativeTokenB == nil {
		return nil, false
	}
	return o.NativeTokenB, true
}

// HasNativeTokenB returns a boolean if a field has been set.
func (o *TokenSwapMetaLiquidity) HasNativeTokenB() bool {
	if o != nil && o.NativeTokenB != nil {
		return true
	}

	return false
}

// SetNativeTokenB gets a reference to the given Amount and assigns it to the NativeTokenB field.
func (o *TokenSwapMetaLiquidity) SetNativeTokenB(v Amount) {
	o.NativeTokenB = &v
}

func (o TokenSwapMetaLiquidity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.UsdTokenA != nil {
		toSerialize["usdTokenA"] = o.UsdTokenA
	}
	if o.UsdTokenB != nil {
		toSerialize["usdTokenB"] = o.UsdTokenB
	}
	if o.NativeTokenA != nil {
		toSerialize["nativeTokenA"] = o.NativeTokenA
	}
	if o.NativeTokenB != nil {
		toSerialize["nativeTokenB"] = o.NativeTokenB
	}
	return json.Marshal(toSerialize)
}

type NullableTokenSwapMetaLiquidity struct {
	value *TokenSwapMetaLiquidity
	isSet bool
}

func (v NullableTokenSwapMetaLiquidity) Get() *TokenSwapMetaLiquidity {
	return v.value
}

func (v *NullableTokenSwapMetaLiquidity) Set(val *TokenSwapMetaLiquidity) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenSwapMetaLiquidity) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenSwapMetaLiquidity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenSwapMetaLiquidity(val *TokenSwapMetaLiquidity) *NullableTokenSwapMetaLiquidity {
	return &NullableTokenSwapMetaLiquidity{value: val, isSet: true}
}

func (v NullableTokenSwapMetaLiquidity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenSwapMetaLiquidity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


