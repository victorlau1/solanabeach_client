/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Validator struct for Validator
type Validator struct {
	Validator *ValidatorValidator `json:"validator,omitempty"`
	Slots *[][]map[string]interface{} `json:"slots,omitempty"`
	Historic *[]ValidatorHistoric `json:"historic,omitempty"`
	LatestBlocks *[]ValidatorLatestBlocks `json:"latestBlocks,omitempty"`
}

// NewValidator instantiates a new Validator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidator() *Validator {
	this := Validator{}
	return &this
}

// NewValidatorWithDefaults instantiates a new Validator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidatorWithDefaults() *Validator {
	this := Validator{}
	return &this
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *Validator) GetValidator() ValidatorValidator {
	if o == nil || o.Validator == nil {
		var ret ValidatorValidator
		return ret
	}
	return *o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validator) GetValidatorOk() (*ValidatorValidator, bool) {
	if o == nil || o.Validator == nil {
		return nil, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *Validator) HasValidator() bool {
	if o != nil && o.Validator != nil {
		return true
	}

	return false
}

// SetValidator gets a reference to the given ValidatorValidator and assigns it to the Validator field.
func (o *Validator) SetValidator(v ValidatorValidator) {
	o.Validator = &v
}

// GetSlots returns the Slots field value if set, zero value otherwise.
func (o *Validator) GetSlots() [][]map[string]interface{} {
	if o == nil || o.Slots == nil {
		var ret [][]map[string]interface{}
		return ret
	}
	return *o.Slots
}

// GetSlotsOk returns a tuple with the Slots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validator) GetSlotsOk() (*[][]map[string]interface{}, bool) {
	if o == nil || o.Slots == nil {
		return nil, false
	}
	return o.Slots, true
}

// HasSlots returns a boolean if a field has been set.
func (o *Validator) HasSlots() bool {
	if o != nil && o.Slots != nil {
		return true
	}

	return false
}

// SetSlots gets a reference to the given [][]map[string]interface{} and assigns it to the Slots field.
func (o *Validator) SetSlots(v [][]map[string]interface{}) {
	o.Slots = &v
}

// GetHistoric returns the Historic field value if set, zero value otherwise.
func (o *Validator) GetHistoric() []ValidatorHistoric {
	if o == nil || o.Historic == nil {
		var ret []ValidatorHistoric
		return ret
	}
	return *o.Historic
}

// GetHistoricOk returns a tuple with the Historic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validator) GetHistoricOk() (*[]ValidatorHistoric, bool) {
	if o == nil || o.Historic == nil {
		return nil, false
	}
	return o.Historic, true
}

// HasHistoric returns a boolean if a field has been set.
func (o *Validator) HasHistoric() bool {
	if o != nil && o.Historic != nil {
		return true
	}

	return false
}

// SetHistoric gets a reference to the given []ValidatorHistoric and assigns it to the Historic field.
func (o *Validator) SetHistoric(v []ValidatorHistoric) {
	o.Historic = &v
}

// GetLatestBlocks returns the LatestBlocks field value if set, zero value otherwise.
func (o *Validator) GetLatestBlocks() []ValidatorLatestBlocks {
	if o == nil || o.LatestBlocks == nil {
		var ret []ValidatorLatestBlocks
		return ret
	}
	return *o.LatestBlocks
}

// GetLatestBlocksOk returns a tuple with the LatestBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Validator) GetLatestBlocksOk() (*[]ValidatorLatestBlocks, bool) {
	if o == nil || o.LatestBlocks == nil {
		return nil, false
	}
	return o.LatestBlocks, true
}

// HasLatestBlocks returns a boolean if a field has been set.
func (o *Validator) HasLatestBlocks() bool {
	if o != nil && o.LatestBlocks != nil {
		return true
	}

	return false
}

// SetLatestBlocks gets a reference to the given []ValidatorLatestBlocks and assigns it to the LatestBlocks field.
func (o *Validator) SetLatestBlocks(v []ValidatorLatestBlocks) {
	o.LatestBlocks = &v
}

func (o Validator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Validator != nil {
		toSerialize["validator"] = o.Validator
	}
	if o.Slots != nil {
		toSerialize["slots"] = o.Slots
	}
	if o.Historic != nil {
		toSerialize["historic"] = o.Historic
	}
	if o.LatestBlocks != nil {
		toSerialize["latestBlocks"] = o.LatestBlocks
	}
	return json.Marshal(toSerialize)
}

type NullableValidator struct {
	value *Validator
	isSet bool
}

func (v NullableValidator) Get() *Validator {
	return v.value
}

func (v *NullableValidator) Set(val *Validator) {
	v.value = val
	v.isSet = true
}

func (v NullableValidator) IsSet() bool {
	return v.isSet
}

func (v *NullableValidator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidator(val *Validator) *NullableValidator {
	return &NullableValidator{value: val, isSet: true}
}

func (v NullableValidator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


