/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TokenSwapMeta struct for TokenSwapMeta
type TokenSwapMeta struct {
	Supply *Amount `json:"supply,omitempty"`
	Liquidity *TokenSwapMetaLiquidity `json:"liquidity,omitempty"`
	Volume *TokenSwapMetaLiquidity `json:"volume,omitempty"`
	Prices *TokenSwapMetaPrices `json:"prices,omitempty"`
	Volumes *[]float32 `json:"volumes,omitempty"`
	Volume24h *float32 `json:"volume24h,omitempty"`
}

// NewTokenSwapMeta instantiates a new TokenSwapMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenSwapMeta() *TokenSwapMeta {
	this := TokenSwapMeta{}
	return &this
}

// NewTokenSwapMetaWithDefaults instantiates a new TokenSwapMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenSwapMetaWithDefaults() *TokenSwapMeta {
	this := TokenSwapMeta{}
	return &this
}

// GetSupply returns the Supply field value if set, zero value otherwise.
func (o *TokenSwapMeta) GetSupply() Amount {
	if o == nil || o.Supply == nil {
		var ret Amount
		return ret
	}
	return *o.Supply
}

// GetSupplyOk returns a tuple with the Supply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenSwapMeta) GetSupplyOk() (*Amount, bool) {
	if o == nil || o.Supply == nil {
		return nil, false
	}
	return o.Supply, true
}

// HasSupply returns a boolean if a field has been set.
func (o *TokenSwapMeta) HasSupply() bool {
	if o != nil && o.Supply != nil {
		return true
	}

	return false
}

// SetSupply gets a reference to the given Amount and assigns it to the Supply field.
func (o *TokenSwapMeta) SetSupply(v Amount) {
	o.Supply = &v
}

// GetLiquidity returns the Liquidity field value if set, zero value otherwise.
func (o *TokenSwapMeta) GetLiquidity() TokenSwapMetaLiquidity {
	if o == nil || o.Liquidity == nil {
		var ret TokenSwapMetaLiquidity
		return ret
	}
	return *o.Liquidity
}

// GetLiquidityOk returns a tuple with the Liquidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenSwapMeta) GetLiquidityOk() (*TokenSwapMetaLiquidity, bool) {
	if o == nil || o.Liquidity == nil {
		return nil, false
	}
	return o.Liquidity, true
}

// HasLiquidity returns a boolean if a field has been set.
func (o *TokenSwapMeta) HasLiquidity() bool {
	if o != nil && o.Liquidity != nil {
		return true
	}

	return false
}

// SetLiquidity gets a reference to the given TokenSwapMetaLiquidity and assigns it to the Liquidity field.
func (o *TokenSwapMeta) SetLiquidity(v TokenSwapMetaLiquidity) {
	o.Liquidity = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *TokenSwapMeta) GetVolume() TokenSwapMetaLiquidity {
	if o == nil || o.Volume == nil {
		var ret TokenSwapMetaLiquidity
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenSwapMeta) GetVolumeOk() (*TokenSwapMetaLiquidity, bool) {
	if o == nil || o.Volume == nil {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *TokenSwapMeta) HasVolume() bool {
	if o != nil && o.Volume != nil {
		return true
	}

	return false
}

// SetVolume gets a reference to the given TokenSwapMetaLiquidity and assigns it to the Volume field.
func (o *TokenSwapMeta) SetVolume(v TokenSwapMetaLiquidity) {
	o.Volume = &v
}

// GetPrices returns the Prices field value if set, zero value otherwise.
func (o *TokenSwapMeta) GetPrices() TokenSwapMetaPrices {
	if o == nil || o.Prices == nil {
		var ret TokenSwapMetaPrices
		return ret
	}
	return *o.Prices
}

// GetPricesOk returns a tuple with the Prices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenSwapMeta) GetPricesOk() (*TokenSwapMetaPrices, bool) {
	if o == nil || o.Prices == nil {
		return nil, false
	}
	return o.Prices, true
}

// HasPrices returns a boolean if a field has been set.
func (o *TokenSwapMeta) HasPrices() bool {
	if o != nil && o.Prices != nil {
		return true
	}

	return false
}

// SetPrices gets a reference to the given TokenSwapMetaPrices and assigns it to the Prices field.
func (o *TokenSwapMeta) SetPrices(v TokenSwapMetaPrices) {
	o.Prices = &v
}

// GetVolumes returns the Volumes field value if set, zero value otherwise.
func (o *TokenSwapMeta) GetVolumes() []float32 {
	if o == nil || o.Volumes == nil {
		var ret []float32
		return ret
	}
	return *o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenSwapMeta) GetVolumesOk() (*[]float32, bool) {
	if o == nil || o.Volumes == nil {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *TokenSwapMeta) HasVolumes() bool {
	if o != nil && o.Volumes != nil {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []float32 and assigns it to the Volumes field.
func (o *TokenSwapMeta) SetVolumes(v []float32) {
	o.Volumes = &v
}

// GetVolume24h returns the Volume24h field value if set, zero value otherwise.
func (o *TokenSwapMeta) GetVolume24h() float32 {
	if o == nil || o.Volume24h == nil {
		var ret float32
		return ret
	}
	return *o.Volume24h
}

// GetVolume24hOk returns a tuple with the Volume24h field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenSwapMeta) GetVolume24hOk() (*float32, bool) {
	if o == nil || o.Volume24h == nil {
		return nil, false
	}
	return o.Volume24h, true
}

// HasVolume24h returns a boolean if a field has been set.
func (o *TokenSwapMeta) HasVolume24h() bool {
	if o != nil && o.Volume24h != nil {
		return true
	}

	return false
}

// SetVolume24h gets a reference to the given float32 and assigns it to the Volume24h field.
func (o *TokenSwapMeta) SetVolume24h(v float32) {
	o.Volume24h = &v
}

func (o TokenSwapMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Supply != nil {
		toSerialize["supply"] = o.Supply
	}
	if o.Liquidity != nil {
		toSerialize["liquidity"] = o.Liquidity
	}
	if o.Volume != nil {
		toSerialize["volume"] = o.Volume
	}
	if o.Prices != nil {
		toSerialize["prices"] = o.Prices
	}
	if o.Volumes != nil {
		toSerialize["volumes"] = o.Volumes
	}
	if o.Volume24h != nil {
		toSerialize["volume24h"] = o.Volume24h
	}
	return json.Marshal(toSerialize)
}

type NullableTokenSwapMeta struct {
	value *TokenSwapMeta
	isSet bool
}

func (v NullableTokenSwapMeta) Get() *TokenSwapMeta {
	return v.value
}

func (v *NullableTokenSwapMeta) Set(val *TokenSwapMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenSwapMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenSwapMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenSwapMeta(val *TokenSwapMeta) *NullableTokenSwapMeta {
	return &NullableTokenSwapMeta{value: val, isSet: true}
}

func (v NullableTokenSwapMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenSwapMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


