/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse20015 struct for InlineResponse20015
type InlineResponse20015 struct {
	Pubkey *NonvalidatorsPubkey `json:"pubkey,omitempty"`
	FeatureSet *int32 `json:"featureSet,omitempty"`
	Gossip *string `json:"gossip,omitempty"`
	Rpc *string `json:"rpc,omitempty"`
	ShredVersion *int32 `json:"shredVersion,omitempty"`
	Tpu *string `json:"tpu,omitempty"`
	Version *string `json:"version,omitempty"`
	Location *NonvalidatorsLocation `json:"location,omitempty"`
	Asn *NonvalidatorsAsn `json:"asn,omitempty"`
	Validator *bool `json:"validator,omitempty"`
}

// NewInlineResponse20015 instantiates a new InlineResponse20015 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20015() *InlineResponse20015 {
	this := InlineResponse20015{}
	return &this
}

// NewInlineResponse20015WithDefaults instantiates a new InlineResponse20015 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20015WithDefaults() *InlineResponse20015 {
	this := InlineResponse20015{}
	return &this
}

// GetPubkey returns the Pubkey field value if set, zero value otherwise.
func (o *InlineResponse20015) GetPubkey() NonvalidatorsPubkey {
	if o == nil || o.Pubkey == nil {
		var ret NonvalidatorsPubkey
		return ret
	}
	return *o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetPubkeyOk() (*NonvalidatorsPubkey, bool) {
	if o == nil || o.Pubkey == nil {
		return nil, false
	}
	return o.Pubkey, true
}

// HasPubkey returns a boolean if a field has been set.
func (o *InlineResponse20015) HasPubkey() bool {
	if o != nil && o.Pubkey != nil {
		return true
	}

	return false
}

// SetPubkey gets a reference to the given NonvalidatorsPubkey and assigns it to the Pubkey field.
func (o *InlineResponse20015) SetPubkey(v NonvalidatorsPubkey) {
	o.Pubkey = &v
}

// GetFeatureSet returns the FeatureSet field value if set, zero value otherwise.
func (o *InlineResponse20015) GetFeatureSet() int32 {
	if o == nil || o.FeatureSet == nil {
		var ret int32
		return ret
	}
	return *o.FeatureSet
}

// GetFeatureSetOk returns a tuple with the FeatureSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetFeatureSetOk() (*int32, bool) {
	if o == nil || o.FeatureSet == nil {
		return nil, false
	}
	return o.FeatureSet, true
}

// HasFeatureSet returns a boolean if a field has been set.
func (o *InlineResponse20015) HasFeatureSet() bool {
	if o != nil && o.FeatureSet != nil {
		return true
	}

	return false
}

// SetFeatureSet gets a reference to the given int32 and assigns it to the FeatureSet field.
func (o *InlineResponse20015) SetFeatureSet(v int32) {
	o.FeatureSet = &v
}

// GetGossip returns the Gossip field value if set, zero value otherwise.
func (o *InlineResponse20015) GetGossip() string {
	if o == nil || o.Gossip == nil {
		var ret string
		return ret
	}
	return *o.Gossip
}

// GetGossipOk returns a tuple with the Gossip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetGossipOk() (*string, bool) {
	if o == nil || o.Gossip == nil {
		return nil, false
	}
	return o.Gossip, true
}

// HasGossip returns a boolean if a field has been set.
func (o *InlineResponse20015) HasGossip() bool {
	if o != nil && o.Gossip != nil {
		return true
	}

	return false
}

// SetGossip gets a reference to the given string and assigns it to the Gossip field.
func (o *InlineResponse20015) SetGossip(v string) {
	o.Gossip = &v
}

// GetRpc returns the Rpc field value if set, zero value otherwise.
func (o *InlineResponse20015) GetRpc() string {
	if o == nil || o.Rpc == nil {
		var ret string
		return ret
	}
	return *o.Rpc
}

// GetRpcOk returns a tuple with the Rpc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetRpcOk() (*string, bool) {
	if o == nil || o.Rpc == nil {
		return nil, false
	}
	return o.Rpc, true
}

// HasRpc returns a boolean if a field has been set.
func (o *InlineResponse20015) HasRpc() bool {
	if o != nil && o.Rpc != nil {
		return true
	}

	return false
}

// SetRpc gets a reference to the given string and assigns it to the Rpc field.
func (o *InlineResponse20015) SetRpc(v string) {
	o.Rpc = &v
}

// GetShredVersion returns the ShredVersion field value if set, zero value otherwise.
func (o *InlineResponse20015) GetShredVersion() int32 {
	if o == nil || o.ShredVersion == nil {
		var ret int32
		return ret
	}
	return *o.ShredVersion
}

// GetShredVersionOk returns a tuple with the ShredVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetShredVersionOk() (*int32, bool) {
	if o == nil || o.ShredVersion == nil {
		return nil, false
	}
	return o.ShredVersion, true
}

// HasShredVersion returns a boolean if a field has been set.
func (o *InlineResponse20015) HasShredVersion() bool {
	if o != nil && o.ShredVersion != nil {
		return true
	}

	return false
}

// SetShredVersion gets a reference to the given int32 and assigns it to the ShredVersion field.
func (o *InlineResponse20015) SetShredVersion(v int32) {
	o.ShredVersion = &v
}

// GetTpu returns the Tpu field value if set, zero value otherwise.
func (o *InlineResponse20015) GetTpu() string {
	if o == nil || o.Tpu == nil {
		var ret string
		return ret
	}
	return *o.Tpu
}

// GetTpuOk returns a tuple with the Tpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetTpuOk() (*string, bool) {
	if o == nil || o.Tpu == nil {
		return nil, false
	}
	return o.Tpu, true
}

// HasTpu returns a boolean if a field has been set.
func (o *InlineResponse20015) HasTpu() bool {
	if o != nil && o.Tpu != nil {
		return true
	}

	return false
}

// SetTpu gets a reference to the given string and assigns it to the Tpu field.
func (o *InlineResponse20015) SetTpu(v string) {
	o.Tpu = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *InlineResponse20015) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *InlineResponse20015) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *InlineResponse20015) SetVersion(v string) {
	o.Version = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *InlineResponse20015) GetLocation() NonvalidatorsLocation {
	if o == nil || o.Location == nil {
		var ret NonvalidatorsLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetLocationOk() (*NonvalidatorsLocation, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *InlineResponse20015) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NonvalidatorsLocation and assigns it to the Location field.
func (o *InlineResponse20015) SetLocation(v NonvalidatorsLocation) {
	o.Location = &v
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *InlineResponse20015) GetAsn() NonvalidatorsAsn {
	if o == nil || o.Asn == nil {
		var ret NonvalidatorsAsn
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetAsnOk() (*NonvalidatorsAsn, bool) {
	if o == nil || o.Asn == nil {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *InlineResponse20015) HasAsn() bool {
	if o != nil && o.Asn != nil {
		return true
	}

	return false
}

// SetAsn gets a reference to the given NonvalidatorsAsn and assigns it to the Asn field.
func (o *InlineResponse20015) SetAsn(v NonvalidatorsAsn) {
	o.Asn = &v
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *InlineResponse20015) GetValidator() bool {
	if o == nil || o.Validator == nil {
		var ret bool
		return ret
	}
	return *o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20015) GetValidatorOk() (*bool, bool) {
	if o == nil || o.Validator == nil {
		return nil, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *InlineResponse20015) HasValidator() bool {
	if o != nil && o.Validator != nil {
		return true
	}

	return false
}

// SetValidator gets a reference to the given bool and assigns it to the Validator field.
func (o *InlineResponse20015) SetValidator(v bool) {
	o.Validator = &v
}

func (o InlineResponse20015) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pubkey != nil {
		toSerialize["pubkey"] = o.Pubkey
	}
	if o.FeatureSet != nil {
		toSerialize["featureSet"] = o.FeatureSet
	}
	if o.Gossip != nil {
		toSerialize["gossip"] = o.Gossip
	}
	if o.Rpc != nil {
		toSerialize["rpc"] = o.Rpc
	}
	if o.ShredVersion != nil {
		toSerialize["shredVersion"] = o.ShredVersion
	}
	if o.Tpu != nil {
		toSerialize["tpu"] = o.Tpu
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Asn != nil {
		toSerialize["asn"] = o.Asn
	}
	if o.Validator != nil {
		toSerialize["validator"] = o.Validator
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20015 struct {
	value *InlineResponse20015
	isSet bool
}

func (v NullableInlineResponse20015) Get() *InlineResponse20015 {
	return v.value
}

func (v *NullableInlineResponse20015) Set(val *InlineResponse20015) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20015) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20015) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20015(val *InlineResponse20015) *NullableInlineResponse20015 {
	return &NullableInlineResponse20015{value: val, isSet: true}
}

func (v NullableInlineResponse20015) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20015) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


