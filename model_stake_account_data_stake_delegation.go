/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// StakeAccountDataStakeDelegation struct for StakeAccountDataStakeDelegation
type StakeAccountDataStakeDelegation struct {
	VoterPubkey *string `json:"voter_pubkey,omitempty"`
	Stake *int32 `json:"stake,omitempty"`
	ActivationEpoch *int32 `json:"activation_epoch,omitempty"`
	DeactivationEpoch *int32 `json:"deactivation_epoch,omitempty"`
	WarmupCooldownRate *int32 `json:"warmup_cooldown_rate,omitempty"`
	ValidatorInfo *BlockProposerData `json:"validatorInfo,omitempty"`
}

// NewStakeAccountDataStakeDelegation instantiates a new StakeAccountDataStakeDelegation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStakeAccountDataStakeDelegation() *StakeAccountDataStakeDelegation {
	this := StakeAccountDataStakeDelegation{}
	return &this
}

// NewStakeAccountDataStakeDelegationWithDefaults instantiates a new StakeAccountDataStakeDelegation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStakeAccountDataStakeDelegationWithDefaults() *StakeAccountDataStakeDelegation {
	this := StakeAccountDataStakeDelegation{}
	return &this
}

// GetVoterPubkey returns the VoterPubkey field value if set, zero value otherwise.
func (o *StakeAccountDataStakeDelegation) GetVoterPubkey() string {
	if o == nil || o.VoterPubkey == nil {
		var ret string
		return ret
	}
	return *o.VoterPubkey
}

// GetVoterPubkeyOk returns a tuple with the VoterPubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StakeAccountDataStakeDelegation) GetVoterPubkeyOk() (*string, bool) {
	if o == nil || o.VoterPubkey == nil {
		return nil, false
	}
	return o.VoterPubkey, true
}

// HasVoterPubkey returns a boolean if a field has been set.
func (o *StakeAccountDataStakeDelegation) HasVoterPubkey() bool {
	if o != nil && o.VoterPubkey != nil {
		return true
	}

	return false
}

// SetVoterPubkey gets a reference to the given string and assigns it to the VoterPubkey field.
func (o *StakeAccountDataStakeDelegation) SetVoterPubkey(v string) {
	o.VoterPubkey = &v
}

// GetStake returns the Stake field value if set, zero value otherwise.
func (o *StakeAccountDataStakeDelegation) GetStake() int32 {
	if o == nil || o.Stake == nil {
		var ret int32
		return ret
	}
	return *o.Stake
}

// GetStakeOk returns a tuple with the Stake field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StakeAccountDataStakeDelegation) GetStakeOk() (*int32, bool) {
	if o == nil || o.Stake == nil {
		return nil, false
	}
	return o.Stake, true
}

// HasStake returns a boolean if a field has been set.
func (o *StakeAccountDataStakeDelegation) HasStake() bool {
	if o != nil && o.Stake != nil {
		return true
	}

	return false
}

// SetStake gets a reference to the given int32 and assigns it to the Stake field.
func (o *StakeAccountDataStakeDelegation) SetStake(v int32) {
	o.Stake = &v
}

// GetActivationEpoch returns the ActivationEpoch field value if set, zero value otherwise.
func (o *StakeAccountDataStakeDelegation) GetActivationEpoch() int32 {
	if o == nil || o.ActivationEpoch == nil {
		var ret int32
		return ret
	}
	return *o.ActivationEpoch
}

// GetActivationEpochOk returns a tuple with the ActivationEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StakeAccountDataStakeDelegation) GetActivationEpochOk() (*int32, bool) {
	if o == nil || o.ActivationEpoch == nil {
		return nil, false
	}
	return o.ActivationEpoch, true
}

// HasActivationEpoch returns a boolean if a field has been set.
func (o *StakeAccountDataStakeDelegation) HasActivationEpoch() bool {
	if o != nil && o.ActivationEpoch != nil {
		return true
	}

	return false
}

// SetActivationEpoch gets a reference to the given int32 and assigns it to the ActivationEpoch field.
func (o *StakeAccountDataStakeDelegation) SetActivationEpoch(v int32) {
	o.ActivationEpoch = &v
}

// GetDeactivationEpoch returns the DeactivationEpoch field value if set, zero value otherwise.
func (o *StakeAccountDataStakeDelegation) GetDeactivationEpoch() int32 {
	if o == nil || o.DeactivationEpoch == nil {
		var ret int32
		return ret
	}
	return *o.DeactivationEpoch
}

// GetDeactivationEpochOk returns a tuple with the DeactivationEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StakeAccountDataStakeDelegation) GetDeactivationEpochOk() (*int32, bool) {
	if o == nil || o.DeactivationEpoch == nil {
		return nil, false
	}
	return o.DeactivationEpoch, true
}

// HasDeactivationEpoch returns a boolean if a field has been set.
func (o *StakeAccountDataStakeDelegation) HasDeactivationEpoch() bool {
	if o != nil && o.DeactivationEpoch != nil {
		return true
	}

	return false
}

// SetDeactivationEpoch gets a reference to the given int32 and assigns it to the DeactivationEpoch field.
func (o *StakeAccountDataStakeDelegation) SetDeactivationEpoch(v int32) {
	o.DeactivationEpoch = &v
}

// GetWarmupCooldownRate returns the WarmupCooldownRate field value if set, zero value otherwise.
func (o *StakeAccountDataStakeDelegation) GetWarmupCooldownRate() int32 {
	if o == nil || o.WarmupCooldownRate == nil {
		var ret int32
		return ret
	}
	return *o.WarmupCooldownRate
}

// GetWarmupCooldownRateOk returns a tuple with the WarmupCooldownRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StakeAccountDataStakeDelegation) GetWarmupCooldownRateOk() (*int32, bool) {
	if o == nil || o.WarmupCooldownRate == nil {
		return nil, false
	}
	return o.WarmupCooldownRate, true
}

// HasWarmupCooldownRate returns a boolean if a field has been set.
func (o *StakeAccountDataStakeDelegation) HasWarmupCooldownRate() bool {
	if o != nil && o.WarmupCooldownRate != nil {
		return true
	}

	return false
}

// SetWarmupCooldownRate gets a reference to the given int32 and assigns it to the WarmupCooldownRate field.
func (o *StakeAccountDataStakeDelegation) SetWarmupCooldownRate(v int32) {
	o.WarmupCooldownRate = &v
}

// GetValidatorInfo returns the ValidatorInfo field value if set, zero value otherwise.
func (o *StakeAccountDataStakeDelegation) GetValidatorInfo() BlockProposerData {
	if o == nil || o.ValidatorInfo == nil {
		var ret BlockProposerData
		return ret
	}
	return *o.ValidatorInfo
}

// GetValidatorInfoOk returns a tuple with the ValidatorInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StakeAccountDataStakeDelegation) GetValidatorInfoOk() (*BlockProposerData, bool) {
	if o == nil || o.ValidatorInfo == nil {
		return nil, false
	}
	return o.ValidatorInfo, true
}

// HasValidatorInfo returns a boolean if a field has been set.
func (o *StakeAccountDataStakeDelegation) HasValidatorInfo() bool {
	if o != nil && o.ValidatorInfo != nil {
		return true
	}

	return false
}

// SetValidatorInfo gets a reference to the given BlockProposerData and assigns it to the ValidatorInfo field.
func (o *StakeAccountDataStakeDelegation) SetValidatorInfo(v BlockProposerData) {
	o.ValidatorInfo = &v
}

func (o StakeAccountDataStakeDelegation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VoterPubkey != nil {
		toSerialize["voter_pubkey"] = o.VoterPubkey
	}
	if o.Stake != nil {
		toSerialize["stake"] = o.Stake
	}
	if o.ActivationEpoch != nil {
		toSerialize["activation_epoch"] = o.ActivationEpoch
	}
	if o.DeactivationEpoch != nil {
		toSerialize["deactivation_epoch"] = o.DeactivationEpoch
	}
	if o.WarmupCooldownRate != nil {
		toSerialize["warmup_cooldown_rate"] = o.WarmupCooldownRate
	}
	if o.ValidatorInfo != nil {
		toSerialize["validatorInfo"] = o.ValidatorInfo
	}
	return json.Marshal(toSerialize)
}

type NullableStakeAccountDataStakeDelegation struct {
	value *StakeAccountDataStakeDelegation
	isSet bool
}

func (v NullableStakeAccountDataStakeDelegation) Get() *StakeAccountDataStakeDelegation {
	return v.value
}

func (v *NullableStakeAccountDataStakeDelegation) Set(val *StakeAccountDataStakeDelegation) {
	v.value = val
	v.isSet = true
}

func (v NullableStakeAccountDataStakeDelegation) IsSet() bool {
	return v.isSet
}

func (v *NullableStakeAccountDataStakeDelegation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStakeAccountDataStakeDelegation(val *StakeAccountDataStakeDelegation) *NullableStakeAccountDataStakeDelegation {
	return &NullableStakeAccountDataStakeDelegation{value: val, isSet: true}
}

func (v NullableStakeAccountDataStakeDelegation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStakeAccountDataStakeDelegation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


