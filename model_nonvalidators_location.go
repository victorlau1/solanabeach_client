/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NonvalidatorsLocation struct for NonvalidatorsLocation
type NonvalidatorsLocation struct {
	Range *[]int32 `json:"range,omitempty"`
	Country *string `json:"country,omitempty"`
	Region *string `json:"region,omitempty"`
	Eu *string `json:"eu,omitempty"`
	Timezone *string `json:"timezone,omitempty"`
	City *string `json:"city,omitempty"`
	Ll *[]int32 `json:"ll,omitempty"`
	Metro *int32 `json:"metro,omitempty"`
	Area *int32 `json:"area,omitempty"`
}

// NewNonvalidatorsLocation instantiates a new NonvalidatorsLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNonvalidatorsLocation() *NonvalidatorsLocation {
	this := NonvalidatorsLocation{}
	return &this
}

// NewNonvalidatorsLocationWithDefaults instantiates a new NonvalidatorsLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNonvalidatorsLocationWithDefaults() *NonvalidatorsLocation {
	this := NonvalidatorsLocation{}
	return &this
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *NonvalidatorsLocation) GetRange() []int32 {
	if o == nil || o.Range == nil {
		var ret []int32
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonvalidatorsLocation) GetRangeOk() (*[]int32, bool) {
	if o == nil || o.Range == nil {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *NonvalidatorsLocation) HasRange() bool {
	if o != nil && o.Range != nil {
		return true
	}

	return false
}

// SetRange gets a reference to the given []int32 and assigns it to the Range field.
func (o *NonvalidatorsLocation) SetRange(v []int32) {
	o.Range = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *NonvalidatorsLocation) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonvalidatorsLocation) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *NonvalidatorsLocation) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *NonvalidatorsLocation) SetCountry(v string) {
	o.Country = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *NonvalidatorsLocation) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonvalidatorsLocation) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *NonvalidatorsLocation) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *NonvalidatorsLocation) SetRegion(v string) {
	o.Region = &v
}

// GetEu returns the Eu field value if set, zero value otherwise.
func (o *NonvalidatorsLocation) GetEu() string {
	if o == nil || o.Eu == nil {
		var ret string
		return ret
	}
	return *o.Eu
}

// GetEuOk returns a tuple with the Eu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonvalidatorsLocation) GetEuOk() (*string, bool) {
	if o == nil || o.Eu == nil {
		return nil, false
	}
	return o.Eu, true
}

// HasEu returns a boolean if a field has been set.
func (o *NonvalidatorsLocation) HasEu() bool {
	if o != nil && o.Eu != nil {
		return true
	}

	return false
}

// SetEu gets a reference to the given string and assigns it to the Eu field.
func (o *NonvalidatorsLocation) SetEu(v string) {
	o.Eu = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *NonvalidatorsLocation) GetTimezone() string {
	if o == nil || o.Timezone == nil {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonvalidatorsLocation) GetTimezoneOk() (*string, bool) {
	if o == nil || o.Timezone == nil {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *NonvalidatorsLocation) HasTimezone() bool {
	if o != nil && o.Timezone != nil {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *NonvalidatorsLocation) SetTimezone(v string) {
	o.Timezone = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *NonvalidatorsLocation) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonvalidatorsLocation) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *NonvalidatorsLocation) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *NonvalidatorsLocation) SetCity(v string) {
	o.City = &v
}

// GetLl returns the Ll field value if set, zero value otherwise.
func (o *NonvalidatorsLocation) GetLl() []int32 {
	if o == nil || o.Ll == nil {
		var ret []int32
		return ret
	}
	return *o.Ll
}

// GetLlOk returns a tuple with the Ll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonvalidatorsLocation) GetLlOk() (*[]int32, bool) {
	if o == nil || o.Ll == nil {
		return nil, false
	}
	return o.Ll, true
}

// HasLl returns a boolean if a field has been set.
func (o *NonvalidatorsLocation) HasLl() bool {
	if o != nil && o.Ll != nil {
		return true
	}

	return false
}

// SetLl gets a reference to the given []int32 and assigns it to the Ll field.
func (o *NonvalidatorsLocation) SetLl(v []int32) {
	o.Ll = &v
}

// GetMetro returns the Metro field value if set, zero value otherwise.
func (o *NonvalidatorsLocation) GetMetro() int32 {
	if o == nil || o.Metro == nil {
		var ret int32
		return ret
	}
	return *o.Metro
}

// GetMetroOk returns a tuple with the Metro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonvalidatorsLocation) GetMetroOk() (*int32, bool) {
	if o == nil || o.Metro == nil {
		return nil, false
	}
	return o.Metro, true
}

// HasMetro returns a boolean if a field has been set.
func (o *NonvalidatorsLocation) HasMetro() bool {
	if o != nil && o.Metro != nil {
		return true
	}

	return false
}

// SetMetro gets a reference to the given int32 and assigns it to the Metro field.
func (o *NonvalidatorsLocation) SetMetro(v int32) {
	o.Metro = &v
}

// GetArea returns the Area field value if set, zero value otherwise.
func (o *NonvalidatorsLocation) GetArea() int32 {
	if o == nil || o.Area == nil {
		var ret int32
		return ret
	}
	return *o.Area
}

// GetAreaOk returns a tuple with the Area field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonvalidatorsLocation) GetAreaOk() (*int32, bool) {
	if o == nil || o.Area == nil {
		return nil, false
	}
	return o.Area, true
}

// HasArea returns a boolean if a field has been set.
func (o *NonvalidatorsLocation) HasArea() bool {
	if o != nil && o.Area != nil {
		return true
	}

	return false
}

// SetArea gets a reference to the given int32 and assigns it to the Area field.
func (o *NonvalidatorsLocation) SetArea(v int32) {
	o.Area = &v
}

func (o NonvalidatorsLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Range != nil {
		toSerialize["range"] = o.Range
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if o.Eu != nil {
		toSerialize["eu"] = o.Eu
	}
	if o.Timezone != nil {
		toSerialize["timezone"] = o.Timezone
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Ll != nil {
		toSerialize["ll"] = o.Ll
	}
	if o.Metro != nil {
		toSerialize["metro"] = o.Metro
	}
	if o.Area != nil {
		toSerialize["area"] = o.Area
	}
	return json.Marshal(toSerialize)
}

type NullableNonvalidatorsLocation struct {
	value *NonvalidatorsLocation
	isSet bool
}

func (v NullableNonvalidatorsLocation) Get() *NonvalidatorsLocation {
	return v.value
}

func (v *NullableNonvalidatorsLocation) Set(val *NonvalidatorsLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableNonvalidatorsLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableNonvalidatorsLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonvalidatorsLocation(val *NonvalidatorsLocation) *NullableNonvalidatorsLocation {
	return &NullableNonvalidatorsLocation{value: val, isSet: true}
}

func (v NullableNonvalidatorsLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonvalidatorsLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


