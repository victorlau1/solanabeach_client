/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse20014MintAddress struct for InlineResponse20014MintAddress
type InlineResponse20014MintAddress struct {
	Name *string `json:"name,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
	CmcId *string `json:"cmcId,omitempty"`
	CoingeckoId *string `json:"coingeckoId,omitempty"`
	Logo *string `json:"logo,omitempty"`
	Meta *InlineResponse20014MintAddressMeta `json:"meta,omitempty"`
}

// NewInlineResponse20014MintAddress instantiates a new InlineResponse20014MintAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20014MintAddress() *InlineResponse20014MintAddress {
	this := InlineResponse20014MintAddress{}
	return &this
}

// NewInlineResponse20014MintAddressWithDefaults instantiates a new InlineResponse20014MintAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20014MintAddressWithDefaults() *InlineResponse20014MintAddress {
	this := InlineResponse20014MintAddress{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *InlineResponse20014MintAddress) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20014MintAddress) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *InlineResponse20014MintAddress) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *InlineResponse20014MintAddress) SetName(v string) {
	o.Name = &v
}

// GetTicker returns the Ticker field value if set, zero value otherwise.
func (o *InlineResponse20014MintAddress) GetTicker() string {
	if o == nil || o.Ticker == nil {
		var ret string
		return ret
	}
	return *o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20014MintAddress) GetTickerOk() (*string, bool) {
	if o == nil || o.Ticker == nil {
		return nil, false
	}
	return o.Ticker, true
}

// HasTicker returns a boolean if a field has been set.
func (o *InlineResponse20014MintAddress) HasTicker() bool {
	if o != nil && o.Ticker != nil {
		return true
	}

	return false
}

// SetTicker gets a reference to the given string and assigns it to the Ticker field.
func (o *InlineResponse20014MintAddress) SetTicker(v string) {
	o.Ticker = &v
}

// GetCmcId returns the CmcId field value if set, zero value otherwise.
func (o *InlineResponse20014MintAddress) GetCmcId() string {
	if o == nil || o.CmcId == nil {
		var ret string
		return ret
	}
	return *o.CmcId
}

// GetCmcIdOk returns a tuple with the CmcId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20014MintAddress) GetCmcIdOk() (*string, bool) {
	if o == nil || o.CmcId == nil {
		return nil, false
	}
	return o.CmcId, true
}

// HasCmcId returns a boolean if a field has been set.
func (o *InlineResponse20014MintAddress) HasCmcId() bool {
	if o != nil && o.CmcId != nil {
		return true
	}

	return false
}

// SetCmcId gets a reference to the given string and assigns it to the CmcId field.
func (o *InlineResponse20014MintAddress) SetCmcId(v string) {
	o.CmcId = &v
}

// GetCoingeckoId returns the CoingeckoId field value if set, zero value otherwise.
func (o *InlineResponse20014MintAddress) GetCoingeckoId() string {
	if o == nil || o.CoingeckoId == nil {
		var ret string
		return ret
	}
	return *o.CoingeckoId
}

// GetCoingeckoIdOk returns a tuple with the CoingeckoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20014MintAddress) GetCoingeckoIdOk() (*string, bool) {
	if o == nil || o.CoingeckoId == nil {
		return nil, false
	}
	return o.CoingeckoId, true
}

// HasCoingeckoId returns a boolean if a field has been set.
func (o *InlineResponse20014MintAddress) HasCoingeckoId() bool {
	if o != nil && o.CoingeckoId != nil {
		return true
	}

	return false
}

// SetCoingeckoId gets a reference to the given string and assigns it to the CoingeckoId field.
func (o *InlineResponse20014MintAddress) SetCoingeckoId(v string) {
	o.CoingeckoId = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *InlineResponse20014MintAddress) GetLogo() string {
	if o == nil || o.Logo == nil {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20014MintAddress) GetLogoOk() (*string, bool) {
	if o == nil || o.Logo == nil {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *InlineResponse20014MintAddress) HasLogo() bool {
	if o != nil && o.Logo != nil {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *InlineResponse20014MintAddress) SetLogo(v string) {
	o.Logo = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *InlineResponse20014MintAddress) GetMeta() InlineResponse20014MintAddressMeta {
	if o == nil || o.Meta == nil {
		var ret InlineResponse20014MintAddressMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20014MintAddress) GetMetaOk() (*InlineResponse20014MintAddressMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *InlineResponse20014MintAddress) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given InlineResponse20014MintAddressMeta and assigns it to the Meta field.
func (o *InlineResponse20014MintAddress) SetMeta(v InlineResponse20014MintAddressMeta) {
	o.Meta = &v
}

func (o InlineResponse20014MintAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Ticker != nil {
		toSerialize["ticker"] = o.Ticker
	}
	if o.CmcId != nil {
		toSerialize["cmcId"] = o.CmcId
	}
	if o.CoingeckoId != nil {
		toSerialize["coingeckoId"] = o.CoingeckoId
	}
	if o.Logo != nil {
		toSerialize["logo"] = o.Logo
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20014MintAddress struct {
	value *InlineResponse20014MintAddress
	isSet bool
}

func (v NullableInlineResponse20014MintAddress) Get() *InlineResponse20014MintAddress {
	return v.value
}

func (v *NullableInlineResponse20014MintAddress) Set(val *InlineResponse20014MintAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20014MintAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20014MintAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20014MintAddress(val *InlineResponse20014MintAddress) *NullableInlineResponse20014MintAddress {
	return &NullableInlineResponse20014MintAddress{value: val, isSet: true}
}

func (v NullableInlineResponse20014MintAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20014MintAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


