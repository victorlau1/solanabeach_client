/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BlockMetrics struct for BlockMetrics
type BlockMetrics struct {
	Txcount *int32 `json:"txcount,omitempty"`
	Failedtxs *int32 `json:"failedtxs,omitempty"`
	Totalfees *int32 `json:"totalfees,omitempty"`
	Instructions *int32 `json:"instructions,omitempty"`
	Sucessfultxs *int32 `json:"sucessfultxs,omitempty"`
	Innerinstructions *int32 `json:"innerinstructions,omitempty"`
}

// NewBlockMetrics instantiates a new BlockMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlockMetrics() *BlockMetrics {
	this := BlockMetrics{}
	return &this
}

// NewBlockMetricsWithDefaults instantiates a new BlockMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockMetricsWithDefaults() *BlockMetrics {
	this := BlockMetrics{}
	return &this
}

// GetTxcount returns the Txcount field value if set, zero value otherwise.
func (o *BlockMetrics) GetTxcount() int32 {
	if o == nil || o.Txcount == nil {
		var ret int32
		return ret
	}
	return *o.Txcount
}

// GetTxcountOk returns a tuple with the Txcount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockMetrics) GetTxcountOk() (*int32, bool) {
	if o == nil || o.Txcount == nil {
		return nil, false
	}
	return o.Txcount, true
}

// HasTxcount returns a boolean if a field has been set.
func (o *BlockMetrics) HasTxcount() bool {
	if o != nil && o.Txcount != nil {
		return true
	}

	return false
}

// SetTxcount gets a reference to the given int32 and assigns it to the Txcount field.
func (o *BlockMetrics) SetTxcount(v int32) {
	o.Txcount = &v
}

// GetFailedtxs returns the Failedtxs field value if set, zero value otherwise.
func (o *BlockMetrics) GetFailedtxs() int32 {
	if o == nil || o.Failedtxs == nil {
		var ret int32
		return ret
	}
	return *o.Failedtxs
}

// GetFailedtxsOk returns a tuple with the Failedtxs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockMetrics) GetFailedtxsOk() (*int32, bool) {
	if o == nil || o.Failedtxs == nil {
		return nil, false
	}
	return o.Failedtxs, true
}

// HasFailedtxs returns a boolean if a field has been set.
func (o *BlockMetrics) HasFailedtxs() bool {
	if o != nil && o.Failedtxs != nil {
		return true
	}

	return false
}

// SetFailedtxs gets a reference to the given int32 and assigns it to the Failedtxs field.
func (o *BlockMetrics) SetFailedtxs(v int32) {
	o.Failedtxs = &v
}

// GetTotalfees returns the Totalfees field value if set, zero value otherwise.
func (o *BlockMetrics) GetTotalfees() int32 {
	if o == nil || o.Totalfees == nil {
		var ret int32
		return ret
	}
	return *o.Totalfees
}

// GetTotalfeesOk returns a tuple with the Totalfees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockMetrics) GetTotalfeesOk() (*int32, bool) {
	if o == nil || o.Totalfees == nil {
		return nil, false
	}
	return o.Totalfees, true
}

// HasTotalfees returns a boolean if a field has been set.
func (o *BlockMetrics) HasTotalfees() bool {
	if o != nil && o.Totalfees != nil {
		return true
	}

	return false
}

// SetTotalfees gets a reference to the given int32 and assigns it to the Totalfees field.
func (o *BlockMetrics) SetTotalfees(v int32) {
	o.Totalfees = &v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *BlockMetrics) GetInstructions() int32 {
	if o == nil || o.Instructions == nil {
		var ret int32
		return ret
	}
	return *o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockMetrics) GetInstructionsOk() (*int32, bool) {
	if o == nil || o.Instructions == nil {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *BlockMetrics) HasInstructions() bool {
	if o != nil && o.Instructions != nil {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given int32 and assigns it to the Instructions field.
func (o *BlockMetrics) SetInstructions(v int32) {
	o.Instructions = &v
}

// GetSucessfultxs returns the Sucessfultxs field value if set, zero value otherwise.
func (o *BlockMetrics) GetSucessfultxs() int32 {
	if o == nil || o.Sucessfultxs == nil {
		var ret int32
		return ret
	}
	return *o.Sucessfultxs
}

// GetSucessfultxsOk returns a tuple with the Sucessfultxs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockMetrics) GetSucessfultxsOk() (*int32, bool) {
	if o == nil || o.Sucessfultxs == nil {
		return nil, false
	}
	return o.Sucessfultxs, true
}

// HasSucessfultxs returns a boolean if a field has been set.
func (o *BlockMetrics) HasSucessfultxs() bool {
	if o != nil && o.Sucessfultxs != nil {
		return true
	}

	return false
}

// SetSucessfultxs gets a reference to the given int32 and assigns it to the Sucessfultxs field.
func (o *BlockMetrics) SetSucessfultxs(v int32) {
	o.Sucessfultxs = &v
}

// GetInnerinstructions returns the Innerinstructions field value if set, zero value otherwise.
func (o *BlockMetrics) GetInnerinstructions() int32 {
	if o == nil || o.Innerinstructions == nil {
		var ret int32
		return ret
	}
	return *o.Innerinstructions
}

// GetInnerinstructionsOk returns a tuple with the Innerinstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BlockMetrics) GetInnerinstructionsOk() (*int32, bool) {
	if o == nil || o.Innerinstructions == nil {
		return nil, false
	}
	return o.Innerinstructions, true
}

// HasInnerinstructions returns a boolean if a field has been set.
func (o *BlockMetrics) HasInnerinstructions() bool {
	if o != nil && o.Innerinstructions != nil {
		return true
	}

	return false
}

// SetInnerinstructions gets a reference to the given int32 and assigns it to the Innerinstructions field.
func (o *BlockMetrics) SetInnerinstructions(v int32) {
	o.Innerinstructions = &v
}

func (o BlockMetrics) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Txcount != nil {
		toSerialize["txcount"] = o.Txcount
	}
	if o.Failedtxs != nil {
		toSerialize["failedtxs"] = o.Failedtxs
	}
	if o.Totalfees != nil {
		toSerialize["totalfees"] = o.Totalfees
	}
	if o.Instructions != nil {
		toSerialize["instructions"] = o.Instructions
	}
	if o.Sucessfultxs != nil {
		toSerialize["sucessfultxs"] = o.Sucessfultxs
	}
	if o.Innerinstructions != nil {
		toSerialize["innerinstructions"] = o.Innerinstructions
	}
	return json.Marshal(toSerialize)
}

type NullableBlockMetrics struct {
	value *BlockMetrics
	isSet bool
}

func (v NullableBlockMetrics) Get() *BlockMetrics {
	return v.value
}

func (v *NullableBlockMetrics) Set(val *BlockMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableBlockMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableBlockMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlockMetrics(val *BlockMetrics) *NullableBlockMetrics {
	return &NullableBlockMetrics{value: val, isSet: true}
}

func (v NullableBlockMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlockMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


