/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Transaction struct for Transaction
type Transaction struct {
	TransactionHash *string `json:"transactionHash,omitempty"`
	BlockNumber *int64 `json:"blockNumber,omitempty"`
	Index *int64 `json:"index,omitempty"`
	Accounts *[]TransactionAccounts `json:"accounts,omitempty"`
	Header *TransactionHeader `json:"header,omitempty"`
	Instructions *[]TransactionInstructions `json:"instructions,omitempty"`
	RecentBlockhash *string `json:"recentBlockhash,omitempty"`
	Signatures *[]string `json:"signatures,omitempty"`
	Meta *TransactionMeta `json:"meta,omitempty"`
	Valid *bool `json:"valid,omitempty"`
	Blocktime *Timestamp `json:"blocktime,omitempty"`
	MostImportantInstruction *TransactionMostImportantInstruction `json:"mostImportantInstruction,omitempty"`
	Smart *[]TransactionSmart `json:"smart,omitempty"`
	Ondemand *bool `json:"ondemand,omitempty"`
}

// NewTransaction instantiates a new Transaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransaction() *Transaction {
	this := Transaction{}
	return &this
}

// NewTransactionWithDefaults instantiates a new Transaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionWithDefaults() *Transaction {
	this := Transaction{}
	return &this
}

// GetTransactionHash returns the TransactionHash field value if set, zero value otherwise.
func (o *Transaction) GetTransactionHash() string {
	if o == nil || o.TransactionHash == nil {
		var ret string
		return ret
	}
	return *o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetTransactionHashOk() (*string, bool) {
	if o == nil || o.TransactionHash == nil {
		return nil, false
	}
	return o.TransactionHash, true
}

// HasTransactionHash returns a boolean if a field has been set.
func (o *Transaction) HasTransactionHash() bool {
	if o != nil && o.TransactionHash != nil {
		return true
	}

	return false
}

// SetTransactionHash gets a reference to the given string and assigns it to the TransactionHash field.
func (o *Transaction) SetTransactionHash(v string) {
	o.TransactionHash = &v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *Transaction) GetBlockNumber() int64 {
	if o == nil || o.BlockNumber == nil {
		var ret int64
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetBlockNumberOk() (*int64, bool) {
	if o == nil || o.BlockNumber == nil {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *Transaction) HasBlockNumber() bool {
	if o != nil && o.BlockNumber != nil {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given int64 and assigns it to the BlockNumber field.
func (o *Transaction) SetBlockNumber(v int64) {
	o.BlockNumber = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *Transaction) GetIndex() int64 {
	if o == nil || o.Index == nil {
		var ret int64
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetIndexOk() (*int64, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *Transaction) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int64 and assigns it to the Index field.
func (o *Transaction) SetIndex(v int64) {
	o.Index = &v
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *Transaction) GetAccounts() []TransactionAccounts {
	if o == nil || o.Accounts == nil {
		var ret []TransactionAccounts
		return ret
	}
	return *o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetAccountsOk() (*[]TransactionAccounts, bool) {
	if o == nil || o.Accounts == nil {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *Transaction) HasAccounts() bool {
	if o != nil && o.Accounts != nil {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []TransactionAccounts and assigns it to the Accounts field.
func (o *Transaction) SetAccounts(v []TransactionAccounts) {
	o.Accounts = &v
}

// GetHeader returns the Header field value if set, zero value otherwise.
func (o *Transaction) GetHeader() TransactionHeader {
	if o == nil || o.Header == nil {
		var ret TransactionHeader
		return ret
	}
	return *o.Header
}

// GetHeaderOk returns a tuple with the Header field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetHeaderOk() (*TransactionHeader, bool) {
	if o == nil || o.Header == nil {
		return nil, false
	}
	return o.Header, true
}

// HasHeader returns a boolean if a field has been set.
func (o *Transaction) HasHeader() bool {
	if o != nil && o.Header != nil {
		return true
	}

	return false
}

// SetHeader gets a reference to the given TransactionHeader and assigns it to the Header field.
func (o *Transaction) SetHeader(v TransactionHeader) {
	o.Header = &v
}

// GetInstructions returns the Instructions field value if set, zero value otherwise.
func (o *Transaction) GetInstructions() []TransactionInstructions {
	if o == nil || o.Instructions == nil {
		var ret []TransactionInstructions
		return ret
	}
	return *o.Instructions
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetInstructionsOk() (*[]TransactionInstructions, bool) {
	if o == nil || o.Instructions == nil {
		return nil, false
	}
	return o.Instructions, true
}

// HasInstructions returns a boolean if a field has been set.
func (o *Transaction) HasInstructions() bool {
	if o != nil && o.Instructions != nil {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given []TransactionInstructions and assigns it to the Instructions field.
func (o *Transaction) SetInstructions(v []TransactionInstructions) {
	o.Instructions = &v
}

// GetRecentBlockhash returns the RecentBlockhash field value if set, zero value otherwise.
func (o *Transaction) GetRecentBlockhash() string {
	if o == nil || o.RecentBlockhash == nil {
		var ret string
		return ret
	}
	return *o.RecentBlockhash
}

// GetRecentBlockhashOk returns a tuple with the RecentBlockhash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetRecentBlockhashOk() (*string, bool) {
	if o == nil || o.RecentBlockhash == nil {
		return nil, false
	}
	return o.RecentBlockhash, true
}

// HasRecentBlockhash returns a boolean if a field has been set.
func (o *Transaction) HasRecentBlockhash() bool {
	if o != nil && o.RecentBlockhash != nil {
		return true
	}

	return false
}

// SetRecentBlockhash gets a reference to the given string and assigns it to the RecentBlockhash field.
func (o *Transaction) SetRecentBlockhash(v string) {
	o.RecentBlockhash = &v
}

// GetSignatures returns the Signatures field value if set, zero value otherwise.
func (o *Transaction) GetSignatures() []string {
	if o == nil || o.Signatures == nil {
		var ret []string
		return ret
	}
	return *o.Signatures
}

// GetSignaturesOk returns a tuple with the Signatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetSignaturesOk() (*[]string, bool) {
	if o == nil || o.Signatures == nil {
		return nil, false
	}
	return o.Signatures, true
}

// HasSignatures returns a boolean if a field has been set.
func (o *Transaction) HasSignatures() bool {
	if o != nil && o.Signatures != nil {
		return true
	}

	return false
}

// SetSignatures gets a reference to the given []string and assigns it to the Signatures field.
func (o *Transaction) SetSignatures(v []string) {
	o.Signatures = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Transaction) GetMeta() TransactionMeta {
	if o == nil || o.Meta == nil {
		var ret TransactionMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetMetaOk() (*TransactionMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Transaction) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given TransactionMeta and assigns it to the Meta field.
func (o *Transaction) SetMeta(v TransactionMeta) {
	o.Meta = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *Transaction) GetValid() bool {
	if o == nil || o.Valid == nil {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetValidOk() (*bool, bool) {
	if o == nil || o.Valid == nil {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *Transaction) HasValid() bool {
	if o != nil && o.Valid != nil {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *Transaction) SetValid(v bool) {
	o.Valid = &v
}

// GetBlocktime returns the Blocktime field value if set, zero value otherwise.
func (o *Transaction) GetBlocktime() Timestamp {
	if o == nil || o.Blocktime == nil {
		var ret Timestamp
		return ret
	}
	return *o.Blocktime
}

// GetBlocktimeOk returns a tuple with the Blocktime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetBlocktimeOk() (*Timestamp, bool) {
	if o == nil || o.Blocktime == nil {
		return nil, false
	}
	return o.Blocktime, true
}

// HasBlocktime returns a boolean if a field has been set.
func (o *Transaction) HasBlocktime() bool {
	if o != nil && o.Blocktime != nil {
		return true
	}

	return false
}

// SetBlocktime gets a reference to the given Timestamp and assigns it to the Blocktime field.
func (o *Transaction) SetBlocktime(v Timestamp) {
	o.Blocktime = &v
}

// GetMostImportantInstruction returns the MostImportantInstruction field value if set, zero value otherwise.
func (o *Transaction) GetMostImportantInstruction() TransactionMostImportantInstruction {
	if o == nil || o.MostImportantInstruction == nil {
		var ret TransactionMostImportantInstruction
		return ret
	}
	return *o.MostImportantInstruction
}

// GetMostImportantInstructionOk returns a tuple with the MostImportantInstruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetMostImportantInstructionOk() (*TransactionMostImportantInstruction, bool) {
	if o == nil || o.MostImportantInstruction == nil {
		return nil, false
	}
	return o.MostImportantInstruction, true
}

// HasMostImportantInstruction returns a boolean if a field has been set.
func (o *Transaction) HasMostImportantInstruction() bool {
	if o != nil && o.MostImportantInstruction != nil {
		return true
	}

	return false
}

// SetMostImportantInstruction gets a reference to the given TransactionMostImportantInstruction and assigns it to the MostImportantInstruction field.
func (o *Transaction) SetMostImportantInstruction(v TransactionMostImportantInstruction) {
	o.MostImportantInstruction = &v
}

// GetSmart returns the Smart field value if set, zero value otherwise.
func (o *Transaction) GetSmart() []TransactionSmart {
	if o == nil || o.Smart == nil {
		var ret []TransactionSmart
		return ret
	}
	return *o.Smart
}

// GetSmartOk returns a tuple with the Smart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetSmartOk() (*[]TransactionSmart, bool) {
	if o == nil || o.Smart == nil {
		return nil, false
	}
	return o.Smart, true
}

// HasSmart returns a boolean if a field has been set.
func (o *Transaction) HasSmart() bool {
	if o != nil && o.Smart != nil {
		return true
	}

	return false
}

// SetSmart gets a reference to the given []TransactionSmart and assigns it to the Smart field.
func (o *Transaction) SetSmart(v []TransactionSmart) {
	o.Smart = &v
}

// GetOndemand returns the Ondemand field value if set, zero value otherwise.
func (o *Transaction) GetOndemand() bool {
	if o == nil || o.Ondemand == nil {
		var ret bool
		return ret
	}
	return *o.Ondemand
}

// GetOndemandOk returns a tuple with the Ondemand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transaction) GetOndemandOk() (*bool, bool) {
	if o == nil || o.Ondemand == nil {
		return nil, false
	}
	return o.Ondemand, true
}

// HasOndemand returns a boolean if a field has been set.
func (o *Transaction) HasOndemand() bool {
	if o != nil && o.Ondemand != nil {
		return true
	}

	return false
}

// SetOndemand gets a reference to the given bool and assigns it to the Ondemand field.
func (o *Transaction) SetOndemand(v bool) {
	o.Ondemand = &v
}

func (o Transaction) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TransactionHash != nil {
		toSerialize["transactionHash"] = o.TransactionHash
	}
	if o.BlockNumber != nil {
		toSerialize["blockNumber"] = o.BlockNumber
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.Accounts != nil {
		toSerialize["accounts"] = o.Accounts
	}
	if o.Header != nil {
		toSerialize["header"] = o.Header
	}
	if o.Instructions != nil {
		toSerialize["instructions"] = o.Instructions
	}
	if o.RecentBlockhash != nil {
		toSerialize["recentBlockhash"] = o.RecentBlockhash
	}
	if o.Signatures != nil {
		toSerialize["signatures"] = o.Signatures
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Valid != nil {
		toSerialize["valid"] = o.Valid
	}
	if o.Blocktime != nil {
		toSerialize["blocktime"] = o.Blocktime
	}
	if o.MostImportantInstruction != nil {
		toSerialize["mostImportantInstruction"] = o.MostImportantInstruction
	}
	if o.Smart != nil {
		toSerialize["smart"] = o.Smart
	}
	if o.Ondemand != nil {
		toSerialize["ondemand"] = o.Ondemand
	}
	return json.Marshal(toSerialize)
}

type NullableTransaction struct {
	value *Transaction
	isSet bool
}

func (v NullableTransaction) Get() *Transaction {
	return v.value
}

func (v *NullableTransaction) Set(val *Transaction) {
	v.value = val
	v.isSet = true
}

func (v NullableTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransaction(val *Transaction) *NullableTransaction {
	return &NullableTransaction{value: val, isSet: true}
}

func (v NullableTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


