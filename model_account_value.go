/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AccountValue struct for AccountValue
type AccountValue struct {
	Base *AccountValueBase `json:"base,omitempty"`
	// Depends on the type of object
	Extended *map[string]interface{} `json:"extended,omitempty"`
}

// NewAccountValue instantiates a new AccountValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountValue() *AccountValue {
	this := AccountValue{}
	return &this
}

// NewAccountValueWithDefaults instantiates a new AccountValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountValueWithDefaults() *AccountValue {
	this := AccountValue{}
	return &this
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *AccountValue) GetBase() AccountValueBase {
	if o == nil || o.Base == nil {
		var ret AccountValueBase
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountValue) GetBaseOk() (*AccountValueBase, bool) {
	if o == nil || o.Base == nil {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *AccountValue) HasBase() bool {
	if o != nil && o.Base != nil {
		return true
	}

	return false
}

// SetBase gets a reference to the given AccountValueBase and assigns it to the Base field.
func (o *AccountValue) SetBase(v AccountValueBase) {
	o.Base = &v
}

// GetExtended returns the Extended field value if set, zero value otherwise.
func (o *AccountValue) GetExtended() map[string]interface{} {
	if o == nil || o.Extended == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Extended
}

// GetExtendedOk returns a tuple with the Extended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountValue) GetExtendedOk() (*map[string]interface{}, bool) {
	if o == nil || o.Extended == nil {
		return nil, false
	}
	return o.Extended, true
}

// HasExtended returns a boolean if a field has been set.
func (o *AccountValue) HasExtended() bool {
	if o != nil && o.Extended != nil {
		return true
	}

	return false
}

// SetExtended gets a reference to the given map[string]interface{} and assigns it to the Extended field.
func (o *AccountValue) SetExtended(v map[string]interface{}) {
	o.Extended = &v
}

func (o AccountValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Base != nil {
		toSerialize["base"] = o.Base
	}
	if o.Extended != nil {
		toSerialize["extended"] = o.Extended
	}
	return json.Marshal(toSerialize)
}

type NullableAccountValue struct {
	value *AccountValue
	isSet bool
}

func (v NullableAccountValue) Get() *AccountValue {
	return v.value
}

func (v *NullableAccountValue) Set(val *AccountValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountValue(val *AccountValue) *NullableAccountValue {
	return &NullableAccountValue{value: val, isSet: true}
}

func (v NullableAccountValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


