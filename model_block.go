/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Block struct for Block
type Block struct {
	Blocknumber *int64 `json:"blocknumber,omitempty"`
	Blockhash *string `json:"blockhash,omitempty"`
	Previousblockhash *string `json:"previousblockhash,omitempty"`
	Parentslot *int64 `json:"parentslot,omitempty"`
	Blocktime *Timestamp `json:"blocktime,omitempty"`
	Metrics *BlockMetrics `json:"metrics,omitempty"`
	Programstats *[]BlockProgramstats `json:"programstats,omitempty"`
	Rewards *map[string]interface{} `json:"rewards,omitempty"`
	Proposer *string `json:"proposer,omitempty"`
	ProposerData *BlockProposerData `json:"proposerData,omitempty"`
	Ondemand *bool `json:"ondemand,omitempty"`
}

// NewBlock instantiates a new Block object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBlock() *Block {
	this := Block{}
	return &this
}

// NewBlockWithDefaults instantiates a new Block object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBlockWithDefaults() *Block {
	this := Block{}
	return &this
}

// GetBlocknumber returns the Blocknumber field value if set, zero value otherwise.
func (o *Block) GetBlocknumber() int64 {
	if o == nil || o.Blocknumber == nil {
		var ret int64
		return ret
	}
	return *o.Blocknumber
}

// GetBlocknumberOk returns a tuple with the Blocknumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetBlocknumberOk() (*int64, bool) {
	if o == nil || o.Blocknumber == nil {
		return nil, false
	}
	return o.Blocknumber, true
}

// HasBlocknumber returns a boolean if a field has been set.
func (o *Block) HasBlocknumber() bool {
	if o != nil && o.Blocknumber != nil {
		return true
	}

	return false
}

// SetBlocknumber gets a reference to the given int64 and assigns it to the Blocknumber field.
func (o *Block) SetBlocknumber(v int64) {
	o.Blocknumber = &v
}

// GetBlockhash returns the Blockhash field value if set, zero value otherwise.
func (o *Block) GetBlockhash() string {
	if o == nil || o.Blockhash == nil {
		var ret string
		return ret
	}
	return *o.Blockhash
}

// GetBlockhashOk returns a tuple with the Blockhash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetBlockhashOk() (*string, bool) {
	if o == nil || o.Blockhash == nil {
		return nil, false
	}
	return o.Blockhash, true
}

// HasBlockhash returns a boolean if a field has been set.
func (o *Block) HasBlockhash() bool {
	if o != nil && o.Blockhash != nil {
		return true
	}

	return false
}

// SetBlockhash gets a reference to the given string and assigns it to the Blockhash field.
func (o *Block) SetBlockhash(v string) {
	o.Blockhash = &v
}

// GetPreviousblockhash returns the Previousblockhash field value if set, zero value otherwise.
func (o *Block) GetPreviousblockhash() string {
	if o == nil || o.Previousblockhash == nil {
		var ret string
		return ret
	}
	return *o.Previousblockhash
}

// GetPreviousblockhashOk returns a tuple with the Previousblockhash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetPreviousblockhashOk() (*string, bool) {
	if o == nil || o.Previousblockhash == nil {
		return nil, false
	}
	return o.Previousblockhash, true
}

// HasPreviousblockhash returns a boolean if a field has been set.
func (o *Block) HasPreviousblockhash() bool {
	if o != nil && o.Previousblockhash != nil {
		return true
	}

	return false
}

// SetPreviousblockhash gets a reference to the given string and assigns it to the Previousblockhash field.
func (o *Block) SetPreviousblockhash(v string) {
	o.Previousblockhash = &v
}

// GetParentslot returns the Parentslot field value if set, zero value otherwise.
func (o *Block) GetParentslot() int64 {
	if o == nil || o.Parentslot == nil {
		var ret int64
		return ret
	}
	return *o.Parentslot
}

// GetParentslotOk returns a tuple with the Parentslot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetParentslotOk() (*int64, bool) {
	if o == nil || o.Parentslot == nil {
		return nil, false
	}
	return o.Parentslot, true
}

// HasParentslot returns a boolean if a field has been set.
func (o *Block) HasParentslot() bool {
	if o != nil && o.Parentslot != nil {
		return true
	}

	return false
}

// SetParentslot gets a reference to the given int64 and assigns it to the Parentslot field.
func (o *Block) SetParentslot(v int64) {
	o.Parentslot = &v
}

// GetBlocktime returns the Blocktime field value if set, zero value otherwise.
func (o *Block) GetBlocktime() Timestamp {
	if o == nil || o.Blocktime == nil {
		var ret Timestamp
		return ret
	}
	return *o.Blocktime
}

// GetBlocktimeOk returns a tuple with the Blocktime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetBlocktimeOk() (*Timestamp, bool) {
	if o == nil || o.Blocktime == nil {
		return nil, false
	}
	return o.Blocktime, true
}

// HasBlocktime returns a boolean if a field has been set.
func (o *Block) HasBlocktime() bool {
	if o != nil && o.Blocktime != nil {
		return true
	}

	return false
}

// SetBlocktime gets a reference to the given Timestamp and assigns it to the Blocktime field.
func (o *Block) SetBlocktime(v Timestamp) {
	o.Blocktime = &v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *Block) GetMetrics() BlockMetrics {
	if o == nil || o.Metrics == nil {
		var ret BlockMetrics
		return ret
	}
	return *o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetMetricsOk() (*BlockMetrics, bool) {
	if o == nil || o.Metrics == nil {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *Block) HasMetrics() bool {
	if o != nil && o.Metrics != nil {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given BlockMetrics and assigns it to the Metrics field.
func (o *Block) SetMetrics(v BlockMetrics) {
	o.Metrics = &v
}

// GetProgramstats returns the Programstats field value if set, zero value otherwise.
func (o *Block) GetProgramstats() []BlockProgramstats {
	if o == nil || o.Programstats == nil {
		var ret []BlockProgramstats
		return ret
	}
	return *o.Programstats
}

// GetProgramstatsOk returns a tuple with the Programstats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetProgramstatsOk() (*[]BlockProgramstats, bool) {
	if o == nil || o.Programstats == nil {
		return nil, false
	}
	return o.Programstats, true
}

// HasProgramstats returns a boolean if a field has been set.
func (o *Block) HasProgramstats() bool {
	if o != nil && o.Programstats != nil {
		return true
	}

	return false
}

// SetProgramstats gets a reference to the given []BlockProgramstats and assigns it to the Programstats field.
func (o *Block) SetProgramstats(v []BlockProgramstats) {
	o.Programstats = &v
}

// GetRewards returns the Rewards field value if set, zero value otherwise.
func (o *Block) GetRewards() map[string]interface{} {
	if o == nil || o.Rewards == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Rewards
}

// GetRewardsOk returns a tuple with the Rewards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetRewardsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Rewards == nil {
		return nil, false
	}
	return o.Rewards, true
}

// HasRewards returns a boolean if a field has been set.
func (o *Block) HasRewards() bool {
	if o != nil && o.Rewards != nil {
		return true
	}

	return false
}

// SetRewards gets a reference to the given map[string]interface{} and assigns it to the Rewards field.
func (o *Block) SetRewards(v map[string]interface{}) {
	o.Rewards = &v
}

// GetProposer returns the Proposer field value if set, zero value otherwise.
func (o *Block) GetProposer() string {
	if o == nil || o.Proposer == nil {
		var ret string
		return ret
	}
	return *o.Proposer
}

// GetProposerOk returns a tuple with the Proposer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetProposerOk() (*string, bool) {
	if o == nil || o.Proposer == nil {
		return nil, false
	}
	return o.Proposer, true
}

// HasProposer returns a boolean if a field has been set.
func (o *Block) HasProposer() bool {
	if o != nil && o.Proposer != nil {
		return true
	}

	return false
}

// SetProposer gets a reference to the given string and assigns it to the Proposer field.
func (o *Block) SetProposer(v string) {
	o.Proposer = &v
}

// GetProposerData returns the ProposerData field value if set, zero value otherwise.
func (o *Block) GetProposerData() BlockProposerData {
	if o == nil || o.ProposerData == nil {
		var ret BlockProposerData
		return ret
	}
	return *o.ProposerData
}

// GetProposerDataOk returns a tuple with the ProposerData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetProposerDataOk() (*BlockProposerData, bool) {
	if o == nil || o.ProposerData == nil {
		return nil, false
	}
	return o.ProposerData, true
}

// HasProposerData returns a boolean if a field has been set.
func (o *Block) HasProposerData() bool {
	if o != nil && o.ProposerData != nil {
		return true
	}

	return false
}

// SetProposerData gets a reference to the given BlockProposerData and assigns it to the ProposerData field.
func (o *Block) SetProposerData(v BlockProposerData) {
	o.ProposerData = &v
}

// GetOndemand returns the Ondemand field value if set, zero value otherwise.
func (o *Block) GetOndemand() bool {
	if o == nil || o.Ondemand == nil {
		var ret bool
		return ret
	}
	return *o.Ondemand
}

// GetOndemandOk returns a tuple with the Ondemand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Block) GetOndemandOk() (*bool, bool) {
	if o == nil || o.Ondemand == nil {
		return nil, false
	}
	return o.Ondemand, true
}

// HasOndemand returns a boolean if a field has been set.
func (o *Block) HasOndemand() bool {
	if o != nil && o.Ondemand != nil {
		return true
	}

	return false
}

// SetOndemand gets a reference to the given bool and assigns it to the Ondemand field.
func (o *Block) SetOndemand(v bool) {
	o.Ondemand = &v
}

func (o Block) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Blocknumber != nil {
		toSerialize["blocknumber"] = o.Blocknumber
	}
	if o.Blockhash != nil {
		toSerialize["blockhash"] = o.Blockhash
	}
	if o.Previousblockhash != nil {
		toSerialize["previousblockhash"] = o.Previousblockhash
	}
	if o.Parentslot != nil {
		toSerialize["parentslot"] = o.Parentslot
	}
	if o.Blocktime != nil {
		toSerialize["blocktime"] = o.Blocktime
	}
	if o.Metrics != nil {
		toSerialize["metrics"] = o.Metrics
	}
	if o.Programstats != nil {
		toSerialize["programstats"] = o.Programstats
	}
	if o.Rewards != nil {
		toSerialize["rewards"] = o.Rewards
	}
	if o.Proposer != nil {
		toSerialize["proposer"] = o.Proposer
	}
	if o.ProposerData != nil {
		toSerialize["proposerData"] = o.ProposerData
	}
	if o.Ondemand != nil {
		toSerialize["ondemand"] = o.Ondemand
	}
	return json.Marshal(toSerialize)
}

type NullableBlock struct {
	value *Block
	isSet bool
}

func (v NullableBlock) Get() *Block {
	return v.value
}

func (v *NullableBlock) Set(val *Block) {
	v.value = val
	v.isSet = true
}

func (v NullableBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBlock(val *Block) *NullableBlock {
	return &NullableBlock{value: val, isSet: true}
}

func (v NullableBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


