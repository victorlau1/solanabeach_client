/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2003 struct for InlineResponse2003
type InlineResponse2003 struct {
	Id *int64 `json:"id,omitempty"`
	Validator *string `json:"validator,omitempty"`
	Stake *int64 `json:"stake,omitempty"`
	Delegators *int64 `json:"delegators,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// NewInlineResponse2003 instantiates a new InlineResponse2003 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2003() *InlineResponse2003 {
	this := InlineResponse2003{}
	return &this
}

// NewInlineResponse2003WithDefaults instantiates a new InlineResponse2003 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2003WithDefaults() *InlineResponse2003 {
	this := InlineResponse2003{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InlineResponse2003) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InlineResponse2003) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *InlineResponse2003) SetId(v int64) {
	o.Id = &v
}

// GetValidator returns the Validator field value if set, zero value otherwise.
func (o *InlineResponse2003) GetValidator() string {
	if o == nil || o.Validator == nil {
		var ret string
		return ret
	}
	return *o.Validator
}

// GetValidatorOk returns a tuple with the Validator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003) GetValidatorOk() (*string, bool) {
	if o == nil || o.Validator == nil {
		return nil, false
	}
	return o.Validator, true
}

// HasValidator returns a boolean if a field has been set.
func (o *InlineResponse2003) HasValidator() bool {
	if o != nil && o.Validator != nil {
		return true
	}

	return false
}

// SetValidator gets a reference to the given string and assigns it to the Validator field.
func (o *InlineResponse2003) SetValidator(v string) {
	o.Validator = &v
}

// GetStake returns the Stake field value if set, zero value otherwise.
func (o *InlineResponse2003) GetStake() int64 {
	if o == nil || o.Stake == nil {
		var ret int64
		return ret
	}
	return *o.Stake
}

// GetStakeOk returns a tuple with the Stake field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003) GetStakeOk() (*int64, bool) {
	if o == nil || o.Stake == nil {
		return nil, false
	}
	return o.Stake, true
}

// HasStake returns a boolean if a field has been set.
func (o *InlineResponse2003) HasStake() bool {
	if o != nil && o.Stake != nil {
		return true
	}

	return false
}

// SetStake gets a reference to the given int64 and assigns it to the Stake field.
func (o *InlineResponse2003) SetStake(v int64) {
	o.Stake = &v
}

// GetDelegators returns the Delegators field value if set, zero value otherwise.
func (o *InlineResponse2003) GetDelegators() int64 {
	if o == nil || o.Delegators == nil {
		var ret int64
		return ret
	}
	return *o.Delegators
}

// GetDelegatorsOk returns a tuple with the Delegators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003) GetDelegatorsOk() (*int64, bool) {
	if o == nil || o.Delegators == nil {
		return nil, false
	}
	return o.Delegators, true
}

// HasDelegators returns a boolean if a field has been set.
func (o *InlineResponse2003) HasDelegators() bool {
	if o != nil && o.Delegators != nil {
		return true
	}

	return false
}

// SetDelegators gets a reference to the given int64 and assigns it to the Delegators field.
func (o *InlineResponse2003) SetDelegators(v int64) {
	o.Delegators = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *InlineResponse2003) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2003) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *InlineResponse2003) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *InlineResponse2003) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o InlineResponse2003) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Validator != nil {
		toSerialize["validator"] = o.Validator
	}
	if o.Stake != nil {
		toSerialize["stake"] = o.Stake
	}
	if o.Delegators != nil {
		toSerialize["delegators"] = o.Delegators
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2003 struct {
	value *InlineResponse2003
	isSet bool
}

func (v NullableInlineResponse2003) Get() *InlineResponse2003 {
	return v.value
}

func (v *NullableInlineResponse2003) Set(val *InlineResponse2003) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2003) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2003) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2003(val *InlineResponse2003) *NullableInlineResponse2003 {
	return &NullableInlineResponse2003{value: val, isSet: true}
}

func (v NullableInlineResponse2003) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2003) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


