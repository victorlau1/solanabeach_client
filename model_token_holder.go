/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TokenHolder struct for TokenHolder
type TokenHolder struct {
	Pubkey *Address `json:"pubkey,omitempty"`
	Lamports *int64 `json:"lamports,omitempty"`
	Mint *Address `json:"mint,omitempty"`
	Owner *Address `json:"owner,omitempty"`
	Amount *int32 `json:"amount,omitempty"`
	State *int32 `json:"state,omitempty"`
	Meta *TokenHolderMeta `json:"meta,omitempty"`
}

// NewTokenHolder instantiates a new TokenHolder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenHolder() *TokenHolder {
	this := TokenHolder{}
	return &this
}

// NewTokenHolderWithDefaults instantiates a new TokenHolder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenHolderWithDefaults() *TokenHolder {
	this := TokenHolder{}
	return &this
}

// GetPubkey returns the Pubkey field value if set, zero value otherwise.
func (o *TokenHolder) GetPubkey() Address {
	if o == nil || o.Pubkey == nil {
		var ret Address
		return ret
	}
	return *o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenHolder) GetPubkeyOk() (*Address, bool) {
	if o == nil || o.Pubkey == nil {
		return nil, false
	}
	return o.Pubkey, true
}

// HasPubkey returns a boolean if a field has been set.
func (o *TokenHolder) HasPubkey() bool {
	if o != nil && o.Pubkey != nil {
		return true
	}

	return false
}

// SetPubkey gets a reference to the given Address and assigns it to the Pubkey field.
func (o *TokenHolder) SetPubkey(v Address) {
	o.Pubkey = &v
}

// GetLamports returns the Lamports field value if set, zero value otherwise.
func (o *TokenHolder) GetLamports() int64 {
	if o == nil || o.Lamports == nil {
		var ret int64
		return ret
	}
	return *o.Lamports
}

// GetLamportsOk returns a tuple with the Lamports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenHolder) GetLamportsOk() (*int64, bool) {
	if o == nil || o.Lamports == nil {
		return nil, false
	}
	return o.Lamports, true
}

// HasLamports returns a boolean if a field has been set.
func (o *TokenHolder) HasLamports() bool {
	if o != nil && o.Lamports != nil {
		return true
	}

	return false
}

// SetLamports gets a reference to the given int64 and assigns it to the Lamports field.
func (o *TokenHolder) SetLamports(v int64) {
	o.Lamports = &v
}

// GetMint returns the Mint field value if set, zero value otherwise.
func (o *TokenHolder) GetMint() Address {
	if o == nil || o.Mint == nil {
		var ret Address
		return ret
	}
	return *o.Mint
}

// GetMintOk returns a tuple with the Mint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenHolder) GetMintOk() (*Address, bool) {
	if o == nil || o.Mint == nil {
		return nil, false
	}
	return o.Mint, true
}

// HasMint returns a boolean if a field has been set.
func (o *TokenHolder) HasMint() bool {
	if o != nil && o.Mint != nil {
		return true
	}

	return false
}

// SetMint gets a reference to the given Address and assigns it to the Mint field.
func (o *TokenHolder) SetMint(v Address) {
	o.Mint = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *TokenHolder) GetOwner() Address {
	if o == nil || o.Owner == nil {
		var ret Address
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenHolder) GetOwnerOk() (*Address, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *TokenHolder) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given Address and assigns it to the Owner field.
func (o *TokenHolder) SetOwner(v Address) {
	o.Owner = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *TokenHolder) GetAmount() int32 {
	if o == nil || o.Amount == nil {
		var ret int32
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenHolder) GetAmountOk() (*int32, bool) {
	if o == nil || o.Amount == nil {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *TokenHolder) HasAmount() bool {
	if o != nil && o.Amount != nil {
		return true
	}

	return false
}

// SetAmount gets a reference to the given int32 and assigns it to the Amount field.
func (o *TokenHolder) SetAmount(v int32) {
	o.Amount = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *TokenHolder) GetState() int32 {
	if o == nil || o.State == nil {
		var ret int32
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenHolder) GetStateOk() (*int32, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *TokenHolder) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given int32 and assigns it to the State field.
func (o *TokenHolder) SetState(v int32) {
	o.State = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *TokenHolder) GetMeta() TokenHolderMeta {
	if o == nil || o.Meta == nil {
		var ret TokenHolderMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenHolder) GetMetaOk() (*TokenHolderMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *TokenHolder) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given TokenHolderMeta and assigns it to the Meta field.
func (o *TokenHolder) SetMeta(v TokenHolderMeta) {
	o.Meta = &v
}

func (o TokenHolder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pubkey != nil {
		toSerialize["pubkey"] = o.Pubkey
	}
	if o.Lamports != nil {
		toSerialize["lamports"] = o.Lamports
	}
	if o.Mint != nil {
		toSerialize["mint"] = o.Mint
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Amount != nil {
		toSerialize["amount"] = o.Amount
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableTokenHolder struct {
	value *TokenHolder
	isSet bool
}

func (v NullableTokenHolder) Get() *TokenHolder {
	return v.value
}

func (v *NullableTokenHolder) Set(val *TokenHolder) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenHolder) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenHolder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenHolder(val *TokenHolder) *NullableTokenHolder {
	return &NullableTokenHolder{value: val, isSet: true}
}

func (v NullableTokenHolder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenHolder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


