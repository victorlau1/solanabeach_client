/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2009 struct for InlineResponse2009
type InlineResponse2009 struct {
	Epoch *int32 `json:"epoch,omitempty"`
	Effective *int32 `json:"effective,omitempty"`
	Activating *int32 `json:"activating,omitempty"`
	Deactivating *int32 `json:"deactivating,omitempty"`
}

// NewInlineResponse2009 instantiates a new InlineResponse2009 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2009() *InlineResponse2009 {
	this := InlineResponse2009{}
	return &this
}

// NewInlineResponse2009WithDefaults instantiates a new InlineResponse2009 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2009WithDefaults() *InlineResponse2009 {
	this := InlineResponse2009{}
	return &this
}

// GetEpoch returns the Epoch field value if set, zero value otherwise.
func (o *InlineResponse2009) GetEpoch() int32 {
	if o == nil || o.Epoch == nil {
		var ret int32
		return ret
	}
	return *o.Epoch
}

// GetEpochOk returns a tuple with the Epoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2009) GetEpochOk() (*int32, bool) {
	if o == nil || o.Epoch == nil {
		return nil, false
	}
	return o.Epoch, true
}

// HasEpoch returns a boolean if a field has been set.
func (o *InlineResponse2009) HasEpoch() bool {
	if o != nil && o.Epoch != nil {
		return true
	}

	return false
}

// SetEpoch gets a reference to the given int32 and assigns it to the Epoch field.
func (o *InlineResponse2009) SetEpoch(v int32) {
	o.Epoch = &v
}

// GetEffective returns the Effective field value if set, zero value otherwise.
func (o *InlineResponse2009) GetEffective() int32 {
	if o == nil || o.Effective == nil {
		var ret int32
		return ret
	}
	return *o.Effective
}

// GetEffectiveOk returns a tuple with the Effective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2009) GetEffectiveOk() (*int32, bool) {
	if o == nil || o.Effective == nil {
		return nil, false
	}
	return o.Effective, true
}

// HasEffective returns a boolean if a field has been set.
func (o *InlineResponse2009) HasEffective() bool {
	if o != nil && o.Effective != nil {
		return true
	}

	return false
}

// SetEffective gets a reference to the given int32 and assigns it to the Effective field.
func (o *InlineResponse2009) SetEffective(v int32) {
	o.Effective = &v
}

// GetActivating returns the Activating field value if set, zero value otherwise.
func (o *InlineResponse2009) GetActivating() int32 {
	if o == nil || o.Activating == nil {
		var ret int32
		return ret
	}
	return *o.Activating
}

// GetActivatingOk returns a tuple with the Activating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2009) GetActivatingOk() (*int32, bool) {
	if o == nil || o.Activating == nil {
		return nil, false
	}
	return o.Activating, true
}

// HasActivating returns a boolean if a field has been set.
func (o *InlineResponse2009) HasActivating() bool {
	if o != nil && o.Activating != nil {
		return true
	}

	return false
}

// SetActivating gets a reference to the given int32 and assigns it to the Activating field.
func (o *InlineResponse2009) SetActivating(v int32) {
	o.Activating = &v
}

// GetDeactivating returns the Deactivating field value if set, zero value otherwise.
func (o *InlineResponse2009) GetDeactivating() int32 {
	if o == nil || o.Deactivating == nil {
		var ret int32
		return ret
	}
	return *o.Deactivating
}

// GetDeactivatingOk returns a tuple with the Deactivating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2009) GetDeactivatingOk() (*int32, bool) {
	if o == nil || o.Deactivating == nil {
		return nil, false
	}
	return o.Deactivating, true
}

// HasDeactivating returns a boolean if a field has been set.
func (o *InlineResponse2009) HasDeactivating() bool {
	if o != nil && o.Deactivating != nil {
		return true
	}

	return false
}

// SetDeactivating gets a reference to the given int32 and assigns it to the Deactivating field.
func (o *InlineResponse2009) SetDeactivating(v int32) {
	o.Deactivating = &v
}

func (o InlineResponse2009) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Epoch != nil {
		toSerialize["epoch"] = o.Epoch
	}
	if o.Effective != nil {
		toSerialize["effective"] = o.Effective
	}
	if o.Activating != nil {
		toSerialize["activating"] = o.Activating
	}
	if o.Deactivating != nil {
		toSerialize["deactivating"] = o.Deactivating
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2009 struct {
	value *InlineResponse2009
	isSet bool
}

func (v NullableInlineResponse2009) Get() *InlineResponse2009 {
	return v.value
}

func (v *NullableInlineResponse2009) Set(val *InlineResponse2009) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2009) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2009) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2009(val *InlineResponse2009) *NullableInlineResponse2009 {
	return &NullableInlineResponse2009{value: val, isSet: true}
}

func (v NullableInlineResponse2009) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2009) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


