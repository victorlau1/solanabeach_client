/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AccountValueBase struct for AccountValueBase
type AccountValueBase struct {
	Address *Address `json:"address,omitempty"`
	Balance *int32 `json:"balance,omitempty"`
	Executable *bool `json:"executable,omitempty"`
	Owner *Address `json:"owner,omitempty"`
	RentEpoch *int32 `json:"rentEpoch,omitempty"`
	DataSize *int32 `json:"dataSize,omitempty"`
}

// NewAccountValueBase instantiates a new AccountValueBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountValueBase() *AccountValueBase {
	this := AccountValueBase{}
	return &this
}

// NewAccountValueBaseWithDefaults instantiates a new AccountValueBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountValueBaseWithDefaults() *AccountValueBase {
	this := AccountValueBase{}
	return &this
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *AccountValueBase) GetAddress() Address {
	if o == nil || o.Address == nil {
		var ret Address
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountValueBase) GetAddressOk() (*Address, bool) {
	if o == nil || o.Address == nil {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *AccountValueBase) HasAddress() bool {
	if o != nil && o.Address != nil {
		return true
	}

	return false
}

// SetAddress gets a reference to the given Address and assigns it to the Address field.
func (o *AccountValueBase) SetAddress(v Address) {
	o.Address = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *AccountValueBase) GetBalance() int32 {
	if o == nil || o.Balance == nil {
		var ret int32
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountValueBase) GetBalanceOk() (*int32, bool) {
	if o == nil || o.Balance == nil {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *AccountValueBase) HasBalance() bool {
	if o != nil && o.Balance != nil {
		return true
	}

	return false
}

// SetBalance gets a reference to the given int32 and assigns it to the Balance field.
func (o *AccountValueBase) SetBalance(v int32) {
	o.Balance = &v
}

// GetExecutable returns the Executable field value if set, zero value otherwise.
func (o *AccountValueBase) GetExecutable() bool {
	if o == nil || o.Executable == nil {
		var ret bool
		return ret
	}
	return *o.Executable
}

// GetExecutableOk returns a tuple with the Executable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountValueBase) GetExecutableOk() (*bool, bool) {
	if o == nil || o.Executable == nil {
		return nil, false
	}
	return o.Executable, true
}

// HasExecutable returns a boolean if a field has been set.
func (o *AccountValueBase) HasExecutable() bool {
	if o != nil && o.Executable != nil {
		return true
	}

	return false
}

// SetExecutable gets a reference to the given bool and assigns it to the Executable field.
func (o *AccountValueBase) SetExecutable(v bool) {
	o.Executable = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *AccountValueBase) GetOwner() Address {
	if o == nil || o.Owner == nil {
		var ret Address
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountValueBase) GetOwnerOk() (*Address, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *AccountValueBase) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given Address and assigns it to the Owner field.
func (o *AccountValueBase) SetOwner(v Address) {
	o.Owner = &v
}

// GetRentEpoch returns the RentEpoch field value if set, zero value otherwise.
func (o *AccountValueBase) GetRentEpoch() int32 {
	if o == nil || o.RentEpoch == nil {
		var ret int32
		return ret
	}
	return *o.RentEpoch
}

// GetRentEpochOk returns a tuple with the RentEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountValueBase) GetRentEpochOk() (*int32, bool) {
	if o == nil || o.RentEpoch == nil {
		return nil, false
	}
	return o.RentEpoch, true
}

// HasRentEpoch returns a boolean if a field has been set.
func (o *AccountValueBase) HasRentEpoch() bool {
	if o != nil && o.RentEpoch != nil {
		return true
	}

	return false
}

// SetRentEpoch gets a reference to the given int32 and assigns it to the RentEpoch field.
func (o *AccountValueBase) SetRentEpoch(v int32) {
	o.RentEpoch = &v
}

// GetDataSize returns the DataSize field value if set, zero value otherwise.
func (o *AccountValueBase) GetDataSize() int32 {
	if o == nil || o.DataSize == nil {
		var ret int32
		return ret
	}
	return *o.DataSize
}

// GetDataSizeOk returns a tuple with the DataSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountValueBase) GetDataSizeOk() (*int32, bool) {
	if o == nil || o.DataSize == nil {
		return nil, false
	}
	return o.DataSize, true
}

// HasDataSize returns a boolean if a field has been set.
func (o *AccountValueBase) HasDataSize() bool {
	if o != nil && o.DataSize != nil {
		return true
	}

	return false
}

// SetDataSize gets a reference to the given int32 and assigns it to the DataSize field.
func (o *AccountValueBase) SetDataSize(v int32) {
	o.DataSize = &v
}

func (o AccountValueBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Address != nil {
		toSerialize["address"] = o.Address
	}
	if o.Balance != nil {
		toSerialize["balance"] = o.Balance
	}
	if o.Executable != nil {
		toSerialize["executable"] = o.Executable
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.RentEpoch != nil {
		toSerialize["rentEpoch"] = o.RentEpoch
	}
	if o.DataSize != nil {
		toSerialize["dataSize"] = o.DataSize
	}
	return json.Marshal(toSerialize)
}

type NullableAccountValueBase struct {
	value *AccountValueBase
	isSet bool
}

func (v NullableAccountValueBase) Get() *AccountValueBase {
	return v.value
}

func (v *NullableAccountValueBase) Set(val *AccountValueBase) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountValueBase) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountValueBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountValueBase(val *AccountValueBase) *NullableAccountValueBase {
	return &NullableAccountValueBase{value: val, isSet: true}
}

func (v NullableAccountValueBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountValueBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


