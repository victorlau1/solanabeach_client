/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2008 struct for InlineResponse2008
type InlineResponse2008 struct {
	Total *int32 `json:"total,omitempty"`
	Circulating *int32 `json:"circulating,omitempty"`
	NonCirculating *int32 `json:"nonCirculating,omitempty"`
}

// NewInlineResponse2008 instantiates a new InlineResponse2008 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2008() *InlineResponse2008 {
	this := InlineResponse2008{}
	return &this
}

// NewInlineResponse2008WithDefaults instantiates a new InlineResponse2008 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2008WithDefaults() *InlineResponse2008 {
	this := InlineResponse2008{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *InlineResponse2008) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *InlineResponse2008) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *InlineResponse2008) SetTotal(v int32) {
	o.Total = &v
}

// GetCirculating returns the Circulating field value if set, zero value otherwise.
func (o *InlineResponse2008) GetCirculating() int32 {
	if o == nil || o.Circulating == nil {
		var ret int32
		return ret
	}
	return *o.Circulating
}

// GetCirculatingOk returns a tuple with the Circulating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetCirculatingOk() (*int32, bool) {
	if o == nil || o.Circulating == nil {
		return nil, false
	}
	return o.Circulating, true
}

// HasCirculating returns a boolean if a field has been set.
func (o *InlineResponse2008) HasCirculating() bool {
	if o != nil && o.Circulating != nil {
		return true
	}

	return false
}

// SetCirculating gets a reference to the given int32 and assigns it to the Circulating field.
func (o *InlineResponse2008) SetCirculating(v int32) {
	o.Circulating = &v
}

// GetNonCirculating returns the NonCirculating field value if set, zero value otherwise.
func (o *InlineResponse2008) GetNonCirculating() int32 {
	if o == nil || o.NonCirculating == nil {
		var ret int32
		return ret
	}
	return *o.NonCirculating
}

// GetNonCirculatingOk returns a tuple with the NonCirculating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2008) GetNonCirculatingOk() (*int32, bool) {
	if o == nil || o.NonCirculating == nil {
		return nil, false
	}
	return o.NonCirculating, true
}

// HasNonCirculating returns a boolean if a field has been set.
func (o *InlineResponse2008) HasNonCirculating() bool {
	if o != nil && o.NonCirculating != nil {
		return true
	}

	return false
}

// SetNonCirculating gets a reference to the given int32 and assigns it to the NonCirculating field.
func (o *InlineResponse2008) SetNonCirculating(v int32) {
	o.NonCirculating = &v
}

func (o InlineResponse2008) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Circulating != nil {
		toSerialize["circulating"] = o.Circulating
	}
	if o.NonCirculating != nil {
		toSerialize["nonCirculating"] = o.NonCirculating
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2008 struct {
	value *InlineResponse2008
	isSet bool
}

func (v NullableInlineResponse2008) Get() *InlineResponse2008 {
	return v.value
}

func (v *NullableInlineResponse2008) Set(val *InlineResponse2008) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2008) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2008) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2008(val *InlineResponse2008) *NullableInlineResponse2008 {
	return &NullableInlineResponse2008{value: val, isSet: true}
}

func (v NullableInlineResponse2008) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2008) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


