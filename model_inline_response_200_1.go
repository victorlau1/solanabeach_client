/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2001 struct for InlineResponse2001
type InlineResponse2001 struct {
	Txhash *string `json:"txhash,omitempty"`
	Txindex *int32 `json:"txindex,omitempty"`
	Blocknumber *int32 `json:"blocknumber,omitempty"`
	Ondemand *bool `json:"ondemand,omitempty"`
}

// NewInlineResponse2001 instantiates a new InlineResponse2001 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2001() *InlineResponse2001 {
	this := InlineResponse2001{}
	return &this
}

// NewInlineResponse2001WithDefaults instantiates a new InlineResponse2001 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2001WithDefaults() *InlineResponse2001 {
	this := InlineResponse2001{}
	return &this
}

// GetTxhash returns the Txhash field value if set, zero value otherwise.
func (o *InlineResponse2001) GetTxhash() string {
	if o == nil || o.Txhash == nil {
		var ret string
		return ret
	}
	return *o.Txhash
}

// GetTxhashOk returns a tuple with the Txhash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetTxhashOk() (*string, bool) {
	if o == nil || o.Txhash == nil {
		return nil, false
	}
	return o.Txhash, true
}

// HasTxhash returns a boolean if a field has been set.
func (o *InlineResponse2001) HasTxhash() bool {
	if o != nil && o.Txhash != nil {
		return true
	}

	return false
}

// SetTxhash gets a reference to the given string and assigns it to the Txhash field.
func (o *InlineResponse2001) SetTxhash(v string) {
	o.Txhash = &v
}

// GetTxindex returns the Txindex field value if set, zero value otherwise.
func (o *InlineResponse2001) GetTxindex() int32 {
	if o == nil || o.Txindex == nil {
		var ret int32
		return ret
	}
	return *o.Txindex
}

// GetTxindexOk returns a tuple with the Txindex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetTxindexOk() (*int32, bool) {
	if o == nil || o.Txindex == nil {
		return nil, false
	}
	return o.Txindex, true
}

// HasTxindex returns a boolean if a field has been set.
func (o *InlineResponse2001) HasTxindex() bool {
	if o != nil && o.Txindex != nil {
		return true
	}

	return false
}

// SetTxindex gets a reference to the given int32 and assigns it to the Txindex field.
func (o *InlineResponse2001) SetTxindex(v int32) {
	o.Txindex = &v
}

// GetBlocknumber returns the Blocknumber field value if set, zero value otherwise.
func (o *InlineResponse2001) GetBlocknumber() int32 {
	if o == nil || o.Blocknumber == nil {
		var ret int32
		return ret
	}
	return *o.Blocknumber
}

// GetBlocknumberOk returns a tuple with the Blocknumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetBlocknumberOk() (*int32, bool) {
	if o == nil || o.Blocknumber == nil {
		return nil, false
	}
	return o.Blocknumber, true
}

// HasBlocknumber returns a boolean if a field has been set.
func (o *InlineResponse2001) HasBlocknumber() bool {
	if o != nil && o.Blocknumber != nil {
		return true
	}

	return false
}

// SetBlocknumber gets a reference to the given int32 and assigns it to the Blocknumber field.
func (o *InlineResponse2001) SetBlocknumber(v int32) {
	o.Blocknumber = &v
}

// GetOndemand returns the Ondemand field value if set, zero value otherwise.
func (o *InlineResponse2001) GetOndemand() bool {
	if o == nil || o.Ondemand == nil {
		var ret bool
		return ret
	}
	return *o.Ondemand
}

// GetOndemandOk returns a tuple with the Ondemand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2001) GetOndemandOk() (*bool, bool) {
	if o == nil || o.Ondemand == nil {
		return nil, false
	}
	return o.Ondemand, true
}

// HasOndemand returns a boolean if a field has been set.
func (o *InlineResponse2001) HasOndemand() bool {
	if o != nil && o.Ondemand != nil {
		return true
	}

	return false
}

// SetOndemand gets a reference to the given bool and assigns it to the Ondemand field.
func (o *InlineResponse2001) SetOndemand(v bool) {
	o.Ondemand = &v
}

func (o InlineResponse2001) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Txhash != nil {
		toSerialize["txhash"] = o.Txhash
	}
	if o.Txindex != nil {
		toSerialize["txindex"] = o.Txindex
	}
	if o.Blocknumber != nil {
		toSerialize["blocknumber"] = o.Blocknumber
	}
	if o.Ondemand != nil {
		toSerialize["ondemand"] = o.Ondemand
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2001 struct {
	value *InlineResponse2001
	isSet bool
}

func (v NullableInlineResponse2001) Get() *InlineResponse2001 {
	return v.value
}

func (v *NullableInlineResponse2001) Set(val *InlineResponse2001) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2001) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2001) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2001(val *InlineResponse2001) *NullableInlineResponse2001 {
	return &NullableInlineResponse2001{value: val, isSet: true}
}

func (v NullableInlineResponse2001) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2001) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


