/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MarketMetaLiquidity struct for MarketMetaLiquidity
type MarketMetaLiquidity struct {
	Total *float32 `json:"total,omitempty"`
	UsdBase *float32 `json:"usdBase,omitempty"`
	UsdQuote *float32 `json:"usdQuote,omitempty"`
	Base *Amount `json:"base,omitempty"`
	Quote *Amount `json:"quote,omitempty"`
}

// NewMarketMetaLiquidity instantiates a new MarketMetaLiquidity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketMetaLiquidity() *MarketMetaLiquidity {
	this := MarketMetaLiquidity{}
	return &this
}

// NewMarketMetaLiquidityWithDefaults instantiates a new MarketMetaLiquidity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketMetaLiquidityWithDefaults() *MarketMetaLiquidity {
	this := MarketMetaLiquidity{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *MarketMetaLiquidity) GetTotal() float32 {
	if o == nil || o.Total == nil {
		var ret float32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketMetaLiquidity) GetTotalOk() (*float32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *MarketMetaLiquidity) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given float32 and assigns it to the Total field.
func (o *MarketMetaLiquidity) SetTotal(v float32) {
	o.Total = &v
}

// GetUsdBase returns the UsdBase field value if set, zero value otherwise.
func (o *MarketMetaLiquidity) GetUsdBase() float32 {
	if o == nil || o.UsdBase == nil {
		var ret float32
		return ret
	}
	return *o.UsdBase
}

// GetUsdBaseOk returns a tuple with the UsdBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketMetaLiquidity) GetUsdBaseOk() (*float32, bool) {
	if o == nil || o.UsdBase == nil {
		return nil, false
	}
	return o.UsdBase, true
}

// HasUsdBase returns a boolean if a field has been set.
func (o *MarketMetaLiquidity) HasUsdBase() bool {
	if o != nil && o.UsdBase != nil {
		return true
	}

	return false
}

// SetUsdBase gets a reference to the given float32 and assigns it to the UsdBase field.
func (o *MarketMetaLiquidity) SetUsdBase(v float32) {
	o.UsdBase = &v
}

// GetUsdQuote returns the UsdQuote field value if set, zero value otherwise.
func (o *MarketMetaLiquidity) GetUsdQuote() float32 {
	if o == nil || o.UsdQuote == nil {
		var ret float32
		return ret
	}
	return *o.UsdQuote
}

// GetUsdQuoteOk returns a tuple with the UsdQuote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketMetaLiquidity) GetUsdQuoteOk() (*float32, bool) {
	if o == nil || o.UsdQuote == nil {
		return nil, false
	}
	return o.UsdQuote, true
}

// HasUsdQuote returns a boolean if a field has been set.
func (o *MarketMetaLiquidity) HasUsdQuote() bool {
	if o != nil && o.UsdQuote != nil {
		return true
	}

	return false
}

// SetUsdQuote gets a reference to the given float32 and assigns it to the UsdQuote field.
func (o *MarketMetaLiquidity) SetUsdQuote(v float32) {
	o.UsdQuote = &v
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *MarketMetaLiquidity) GetBase() Amount {
	if o == nil || o.Base == nil {
		var ret Amount
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketMetaLiquidity) GetBaseOk() (*Amount, bool) {
	if o == nil || o.Base == nil {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *MarketMetaLiquidity) HasBase() bool {
	if o != nil && o.Base != nil {
		return true
	}

	return false
}

// SetBase gets a reference to the given Amount and assigns it to the Base field.
func (o *MarketMetaLiquidity) SetBase(v Amount) {
	o.Base = &v
}

// GetQuote returns the Quote field value if set, zero value otherwise.
func (o *MarketMetaLiquidity) GetQuote() Amount {
	if o == nil || o.Quote == nil {
		var ret Amount
		return ret
	}
	return *o.Quote
}

// GetQuoteOk returns a tuple with the Quote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketMetaLiquidity) GetQuoteOk() (*Amount, bool) {
	if o == nil || o.Quote == nil {
		return nil, false
	}
	return o.Quote, true
}

// HasQuote returns a boolean if a field has been set.
func (o *MarketMetaLiquidity) HasQuote() bool {
	if o != nil && o.Quote != nil {
		return true
	}

	return false
}

// SetQuote gets a reference to the given Amount and assigns it to the Quote field.
func (o *MarketMetaLiquidity) SetQuote(v Amount) {
	o.Quote = &v
}

func (o MarketMetaLiquidity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.UsdBase != nil {
		toSerialize["usdBase"] = o.UsdBase
	}
	if o.UsdQuote != nil {
		toSerialize["usdQuote"] = o.UsdQuote
	}
	if o.Base != nil {
		toSerialize["base"] = o.Base
	}
	if o.Quote != nil {
		toSerialize["quote"] = o.Quote
	}
	return json.Marshal(toSerialize)
}

type NullableMarketMetaLiquidity struct {
	value *MarketMetaLiquidity
	isSet bool
}

func (v NullableMarketMetaLiquidity) Get() *MarketMetaLiquidity {
	return v.value
}

func (v *NullableMarketMetaLiquidity) Set(val *MarketMetaLiquidity) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketMetaLiquidity) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketMetaLiquidity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketMetaLiquidity(val *MarketMetaLiquidity) *NullableMarketMetaLiquidity {
	return &NullableMarketMetaLiquidity{value: val, isSet: true}
}

func (v NullableMarketMetaLiquidity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketMetaLiquidity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


