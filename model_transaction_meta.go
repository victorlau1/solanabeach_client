/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionMeta struct for TransactionMeta
type TransactionMeta struct {
	Err *map[string]interface{} `json:"err,omitempty"`
	Fee *int32 `json:"fee,omitempty"`
	Status *map[string]interface{} `json:"status,omitempty"`
	LogMessages *[]string `json:"logMessages,omitempty"`
	PreBalances *[]int32 `json:"preBalances,omitempty"`
	PostBalances *[]int32 `json:"postBalances,omitempty"`
}

// NewTransactionMeta instantiates a new TransactionMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionMeta() *TransactionMeta {
	this := TransactionMeta{}
	return &this
}

// NewTransactionMetaWithDefaults instantiates a new TransactionMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionMetaWithDefaults() *TransactionMeta {
	this := TransactionMeta{}
	return &this
}

// GetErr returns the Err field value if set, zero value otherwise.
func (o *TransactionMeta) GetErr() map[string]interface{} {
	if o == nil || o.Err == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Err
}

// GetErrOk returns a tuple with the Err field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMeta) GetErrOk() (*map[string]interface{}, bool) {
	if o == nil || o.Err == nil {
		return nil, false
	}
	return o.Err, true
}

// HasErr returns a boolean if a field has been set.
func (o *TransactionMeta) HasErr() bool {
	if o != nil && o.Err != nil {
		return true
	}

	return false
}

// SetErr gets a reference to the given map[string]interface{} and assigns it to the Err field.
func (o *TransactionMeta) SetErr(v map[string]interface{}) {
	o.Err = &v
}

// GetFee returns the Fee field value if set, zero value otherwise.
func (o *TransactionMeta) GetFee() int32 {
	if o == nil || o.Fee == nil {
		var ret int32
		return ret
	}
	return *o.Fee
}

// GetFeeOk returns a tuple with the Fee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMeta) GetFeeOk() (*int32, bool) {
	if o == nil || o.Fee == nil {
		return nil, false
	}
	return o.Fee, true
}

// HasFee returns a boolean if a field has been set.
func (o *TransactionMeta) HasFee() bool {
	if o != nil && o.Fee != nil {
		return true
	}

	return false
}

// SetFee gets a reference to the given int32 and assigns it to the Fee field.
func (o *TransactionMeta) SetFee(v int32) {
	o.Fee = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TransactionMeta) GetStatus() map[string]interface{} {
	if o == nil || o.Status == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMeta) GetStatusOk() (*map[string]interface{}, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TransactionMeta) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given map[string]interface{} and assigns it to the Status field.
func (o *TransactionMeta) SetStatus(v map[string]interface{}) {
	o.Status = &v
}

// GetLogMessages returns the LogMessages field value if set, zero value otherwise.
func (o *TransactionMeta) GetLogMessages() []string {
	if o == nil || o.LogMessages == nil {
		var ret []string
		return ret
	}
	return *o.LogMessages
}

// GetLogMessagesOk returns a tuple with the LogMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMeta) GetLogMessagesOk() (*[]string, bool) {
	if o == nil || o.LogMessages == nil {
		return nil, false
	}
	return o.LogMessages, true
}

// HasLogMessages returns a boolean if a field has been set.
func (o *TransactionMeta) HasLogMessages() bool {
	if o != nil && o.LogMessages != nil {
		return true
	}

	return false
}

// SetLogMessages gets a reference to the given []string and assigns it to the LogMessages field.
func (o *TransactionMeta) SetLogMessages(v []string) {
	o.LogMessages = &v
}

// GetPreBalances returns the PreBalances field value if set, zero value otherwise.
func (o *TransactionMeta) GetPreBalances() []int32 {
	if o == nil || o.PreBalances == nil {
		var ret []int32
		return ret
	}
	return *o.PreBalances
}

// GetPreBalancesOk returns a tuple with the PreBalances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMeta) GetPreBalancesOk() (*[]int32, bool) {
	if o == nil || o.PreBalances == nil {
		return nil, false
	}
	return o.PreBalances, true
}

// HasPreBalances returns a boolean if a field has been set.
func (o *TransactionMeta) HasPreBalances() bool {
	if o != nil && o.PreBalances != nil {
		return true
	}

	return false
}

// SetPreBalances gets a reference to the given []int32 and assigns it to the PreBalances field.
func (o *TransactionMeta) SetPreBalances(v []int32) {
	o.PreBalances = &v
}

// GetPostBalances returns the PostBalances field value if set, zero value otherwise.
func (o *TransactionMeta) GetPostBalances() []int32 {
	if o == nil || o.PostBalances == nil {
		var ret []int32
		return ret
	}
	return *o.PostBalances
}

// GetPostBalancesOk returns a tuple with the PostBalances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionMeta) GetPostBalancesOk() (*[]int32, bool) {
	if o == nil || o.PostBalances == nil {
		return nil, false
	}
	return o.PostBalances, true
}

// HasPostBalances returns a boolean if a field has been set.
func (o *TransactionMeta) HasPostBalances() bool {
	if o != nil && o.PostBalances != nil {
		return true
	}

	return false
}

// SetPostBalances gets a reference to the given []int32 and assigns it to the PostBalances field.
func (o *TransactionMeta) SetPostBalances(v []int32) {
	o.PostBalances = &v
}

func (o TransactionMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Err != nil {
		toSerialize["err"] = o.Err
	}
	if o.Fee != nil {
		toSerialize["fee"] = o.Fee
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.LogMessages != nil {
		toSerialize["logMessages"] = o.LogMessages
	}
	if o.PreBalances != nil {
		toSerialize["preBalances"] = o.PreBalances
	}
	if o.PostBalances != nil {
		toSerialize["postBalances"] = o.PostBalances
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionMeta struct {
	value *TransactionMeta
	isSet bool
}

func (v NullableTransactionMeta) Get() *TransactionMeta {
	return v.value
}

func (v *NullableTransactionMeta) Set(val *TransactionMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionMeta(val *TransactionMeta) *NullableTransactionMeta {
	return &NullableTransactionMeta{value: val, isSet: true}
}

func (v NullableTransactionMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


