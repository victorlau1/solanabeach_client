/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TokenMeta struct for TokenMeta
type TokenMeta struct {
	FreezeAuthority *string `json:"freezeAuthority,omitempty"`
	MintAuthority *string `json:"mintAuthority,omitempty"`
	Url *string `json:"url,omitempty"`
	SwapVolume *float32 `json:"swapVolume,omitempty"`
	SwapPrice *float32 `json:"swapPrice,omitempty"`
	MarketVolume *float32 `json:"marketVolume,omitempty"`
	MarketPrice *float32 `json:"marketPrice,omitempty"`
}

// NewTokenMeta instantiates a new TokenMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenMeta() *TokenMeta {
	this := TokenMeta{}
	return &this
}

// NewTokenMetaWithDefaults instantiates a new TokenMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenMetaWithDefaults() *TokenMeta {
	this := TokenMeta{}
	return &this
}

// GetFreezeAuthority returns the FreezeAuthority field value if set, zero value otherwise.
func (o *TokenMeta) GetFreezeAuthority() string {
	if o == nil || o.FreezeAuthority == nil {
		var ret string
		return ret
	}
	return *o.FreezeAuthority
}

// GetFreezeAuthorityOk returns a tuple with the FreezeAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMeta) GetFreezeAuthorityOk() (*string, bool) {
	if o == nil || o.FreezeAuthority == nil {
		return nil, false
	}
	return o.FreezeAuthority, true
}

// HasFreezeAuthority returns a boolean if a field has been set.
func (o *TokenMeta) HasFreezeAuthority() bool {
	if o != nil && o.FreezeAuthority != nil {
		return true
	}

	return false
}

// SetFreezeAuthority gets a reference to the given string and assigns it to the FreezeAuthority field.
func (o *TokenMeta) SetFreezeAuthority(v string) {
	o.FreezeAuthority = &v
}

// GetMintAuthority returns the MintAuthority field value if set, zero value otherwise.
func (o *TokenMeta) GetMintAuthority() string {
	if o == nil || o.MintAuthority == nil {
		var ret string
		return ret
	}
	return *o.MintAuthority
}

// GetMintAuthorityOk returns a tuple with the MintAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMeta) GetMintAuthorityOk() (*string, bool) {
	if o == nil || o.MintAuthority == nil {
		return nil, false
	}
	return o.MintAuthority, true
}

// HasMintAuthority returns a boolean if a field has been set.
func (o *TokenMeta) HasMintAuthority() bool {
	if o != nil && o.MintAuthority != nil {
		return true
	}

	return false
}

// SetMintAuthority gets a reference to the given string and assigns it to the MintAuthority field.
func (o *TokenMeta) SetMintAuthority(v string) {
	o.MintAuthority = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *TokenMeta) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMeta) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *TokenMeta) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *TokenMeta) SetUrl(v string) {
	o.Url = &v
}

// GetSwapVolume returns the SwapVolume field value if set, zero value otherwise.
func (o *TokenMeta) GetSwapVolume() float32 {
	if o == nil || o.SwapVolume == nil {
		var ret float32
		return ret
	}
	return *o.SwapVolume
}

// GetSwapVolumeOk returns a tuple with the SwapVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMeta) GetSwapVolumeOk() (*float32, bool) {
	if o == nil || o.SwapVolume == nil {
		return nil, false
	}
	return o.SwapVolume, true
}

// HasSwapVolume returns a boolean if a field has been set.
func (o *TokenMeta) HasSwapVolume() bool {
	if o != nil && o.SwapVolume != nil {
		return true
	}

	return false
}

// SetSwapVolume gets a reference to the given float32 and assigns it to the SwapVolume field.
func (o *TokenMeta) SetSwapVolume(v float32) {
	o.SwapVolume = &v
}

// GetSwapPrice returns the SwapPrice field value if set, zero value otherwise.
func (o *TokenMeta) GetSwapPrice() float32 {
	if o == nil || o.SwapPrice == nil {
		var ret float32
		return ret
	}
	return *o.SwapPrice
}

// GetSwapPriceOk returns a tuple with the SwapPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMeta) GetSwapPriceOk() (*float32, bool) {
	if o == nil || o.SwapPrice == nil {
		return nil, false
	}
	return o.SwapPrice, true
}

// HasSwapPrice returns a boolean if a field has been set.
func (o *TokenMeta) HasSwapPrice() bool {
	if o != nil && o.SwapPrice != nil {
		return true
	}

	return false
}

// SetSwapPrice gets a reference to the given float32 and assigns it to the SwapPrice field.
func (o *TokenMeta) SetSwapPrice(v float32) {
	o.SwapPrice = &v
}

// GetMarketVolume returns the MarketVolume field value if set, zero value otherwise.
func (o *TokenMeta) GetMarketVolume() float32 {
	if o == nil || o.MarketVolume == nil {
		var ret float32
		return ret
	}
	return *o.MarketVolume
}

// GetMarketVolumeOk returns a tuple with the MarketVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMeta) GetMarketVolumeOk() (*float32, bool) {
	if o == nil || o.MarketVolume == nil {
		return nil, false
	}
	return o.MarketVolume, true
}

// HasMarketVolume returns a boolean if a field has been set.
func (o *TokenMeta) HasMarketVolume() bool {
	if o != nil && o.MarketVolume != nil {
		return true
	}

	return false
}

// SetMarketVolume gets a reference to the given float32 and assigns it to the MarketVolume field.
func (o *TokenMeta) SetMarketVolume(v float32) {
	o.MarketVolume = &v
}

// GetMarketPrice returns the MarketPrice field value if set, zero value otherwise.
func (o *TokenMeta) GetMarketPrice() float32 {
	if o == nil || o.MarketPrice == nil {
		var ret float32
		return ret
	}
	return *o.MarketPrice
}

// GetMarketPriceOk returns a tuple with the MarketPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenMeta) GetMarketPriceOk() (*float32, bool) {
	if o == nil || o.MarketPrice == nil {
		return nil, false
	}
	return o.MarketPrice, true
}

// HasMarketPrice returns a boolean if a field has been set.
func (o *TokenMeta) HasMarketPrice() bool {
	if o != nil && o.MarketPrice != nil {
		return true
	}

	return false
}

// SetMarketPrice gets a reference to the given float32 and assigns it to the MarketPrice field.
func (o *TokenMeta) SetMarketPrice(v float32) {
	o.MarketPrice = &v
}

func (o TokenMeta) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FreezeAuthority != nil {
		toSerialize["freezeAuthority"] = o.FreezeAuthority
	}
	if o.MintAuthority != nil {
		toSerialize["mintAuthority"] = o.MintAuthority
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.SwapVolume != nil {
		toSerialize["swapVolume"] = o.SwapVolume
	}
	if o.SwapPrice != nil {
		toSerialize["swapPrice"] = o.SwapPrice
	}
	if o.MarketVolume != nil {
		toSerialize["marketVolume"] = o.MarketVolume
	}
	if o.MarketPrice != nil {
		toSerialize["marketPrice"] = o.MarketPrice
	}
	return json.Marshal(toSerialize)
}

type NullableTokenMeta struct {
	value *TokenMeta
	isSet bool
}

func (v NullableTokenMeta) Get() *TokenMeta {
	return v.value
}

func (v *NullableTokenMeta) Set(val *TokenMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenMeta(val *TokenMeta) *NullableTokenMeta {
	return &NullableTokenMeta{value: val, isSet: true}
}

func (v NullableTokenMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


