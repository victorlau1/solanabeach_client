/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TokenPricedata struct for TokenPricedata
type TokenPricedata struct {
	Price *float32 `json:"price,omitempty"`
	Volume24h *float32 `json:"volume_24h,omitempty"`
	PercentChange1h *float32 `json:"percent_change_1h,omitempty"`
	LastUpdated *int32 `json:"last_updated,omitempty"`
}

// NewTokenPricedata instantiates a new TokenPricedata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTokenPricedata() *TokenPricedata {
	this := TokenPricedata{}
	return &this
}

// NewTokenPricedataWithDefaults instantiates a new TokenPricedata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenPricedataWithDefaults() *TokenPricedata {
	this := TokenPricedata{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *TokenPricedata) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPricedata) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *TokenPricedata) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *TokenPricedata) SetPrice(v float32) {
	o.Price = &v
}

// GetVolume24h returns the Volume24h field value if set, zero value otherwise.
func (o *TokenPricedata) GetVolume24h() float32 {
	if o == nil || o.Volume24h == nil {
		var ret float32
		return ret
	}
	return *o.Volume24h
}

// GetVolume24hOk returns a tuple with the Volume24h field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPricedata) GetVolume24hOk() (*float32, bool) {
	if o == nil || o.Volume24h == nil {
		return nil, false
	}
	return o.Volume24h, true
}

// HasVolume24h returns a boolean if a field has been set.
func (o *TokenPricedata) HasVolume24h() bool {
	if o != nil && o.Volume24h != nil {
		return true
	}

	return false
}

// SetVolume24h gets a reference to the given float32 and assigns it to the Volume24h field.
func (o *TokenPricedata) SetVolume24h(v float32) {
	o.Volume24h = &v
}

// GetPercentChange1h returns the PercentChange1h field value if set, zero value otherwise.
func (o *TokenPricedata) GetPercentChange1h() float32 {
	if o == nil || o.PercentChange1h == nil {
		var ret float32
		return ret
	}
	return *o.PercentChange1h
}

// GetPercentChange1hOk returns a tuple with the PercentChange1h field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPricedata) GetPercentChange1hOk() (*float32, bool) {
	if o == nil || o.PercentChange1h == nil {
		return nil, false
	}
	return o.PercentChange1h, true
}

// HasPercentChange1h returns a boolean if a field has been set.
func (o *TokenPricedata) HasPercentChange1h() bool {
	if o != nil && o.PercentChange1h != nil {
		return true
	}

	return false
}

// SetPercentChange1h gets a reference to the given float32 and assigns it to the PercentChange1h field.
func (o *TokenPricedata) SetPercentChange1h(v float32) {
	o.PercentChange1h = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *TokenPricedata) GetLastUpdated() int32 {
	if o == nil || o.LastUpdated == nil {
		var ret int32
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TokenPricedata) GetLastUpdatedOk() (*int32, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *TokenPricedata) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given int32 and assigns it to the LastUpdated field.
func (o *TokenPricedata) SetLastUpdated(v int32) {
	o.LastUpdated = &v
}

func (o TokenPricedata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Volume24h != nil {
		toSerialize["volume_24h"] = o.Volume24h
	}
	if o.PercentChange1h != nil {
		toSerialize["percent_change_1h"] = o.PercentChange1h
	}
	if o.LastUpdated != nil {
		toSerialize["last_updated"] = o.LastUpdated
	}
	return json.Marshal(toSerialize)
}

type NullableTokenPricedata struct {
	value *TokenPricedata
	isSet bool
}

func (v NullableTokenPricedata) Get() *TokenPricedata {
	return v.value
}

func (v *NullableTokenPricedata) Set(val *TokenPricedata) {
	v.value = val
	v.isSet = true
}

func (v NullableTokenPricedata) IsSet() bool {
	return v.isSet
}

func (v *NullableTokenPricedata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTokenPricedata(val *TokenPricedata) *NullableTokenPricedata {
	return &NullableTokenPricedata{value: val, isSet: true}
}

func (v NullableTokenPricedata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTokenPricedata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


