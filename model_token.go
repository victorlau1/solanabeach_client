/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Token struct for Token
type Token struct {
	Name *string `json:"name,omitempty"`
	Ticker *string `json:"ticker,omitempty"`
	Logo *string `json:"logo,omitempty"`
	Cmcid *int32 `json:"cmcid,omitempty"`
	Pricedata *TokenPricedata `json:"pricedata,omitempty"`
	Pubkey *string `json:"pubkey,omitempty"`
	Lamports *int64 `json:"lamports,omitempty"`
	Supply *int32 `json:"supply,omitempty"`
	Decimals *int32 `json:"decimals,omitempty"`
	Initialized *bool `json:"initialized,omitempty"`
	Holders *int32 `json:"holders,omitempty"`
	Meta *TokenMeta `json:"meta,omitempty"`
	Ondemand *bool `json:"ondemand,omitempty"`
}

// NewToken instantiates a new Token object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToken() *Token {
	this := Token{}
	return &this
}

// NewTokenWithDefaults instantiates a new Token object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTokenWithDefaults() *Token {
	this := Token{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Token) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Token) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Token) SetName(v string) {
	o.Name = &v
}

// GetTicker returns the Ticker field value if set, zero value otherwise.
func (o *Token) GetTicker() string {
	if o == nil || o.Ticker == nil {
		var ret string
		return ret
	}
	return *o.Ticker
}

// GetTickerOk returns a tuple with the Ticker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetTickerOk() (*string, bool) {
	if o == nil || o.Ticker == nil {
		return nil, false
	}
	return o.Ticker, true
}

// HasTicker returns a boolean if a field has been set.
func (o *Token) HasTicker() bool {
	if o != nil && o.Ticker != nil {
		return true
	}

	return false
}

// SetTicker gets a reference to the given string and assigns it to the Ticker field.
func (o *Token) SetTicker(v string) {
	o.Ticker = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *Token) GetLogo() string {
	if o == nil || o.Logo == nil {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetLogoOk() (*string, bool) {
	if o == nil || o.Logo == nil {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *Token) HasLogo() bool {
	if o != nil && o.Logo != nil {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *Token) SetLogo(v string) {
	o.Logo = &v
}

// GetCmcid returns the Cmcid field value if set, zero value otherwise.
func (o *Token) GetCmcid() int32 {
	if o == nil || o.Cmcid == nil {
		var ret int32
		return ret
	}
	return *o.Cmcid
}

// GetCmcidOk returns a tuple with the Cmcid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetCmcidOk() (*int32, bool) {
	if o == nil || o.Cmcid == nil {
		return nil, false
	}
	return o.Cmcid, true
}

// HasCmcid returns a boolean if a field has been set.
func (o *Token) HasCmcid() bool {
	if o != nil && o.Cmcid != nil {
		return true
	}

	return false
}

// SetCmcid gets a reference to the given int32 and assigns it to the Cmcid field.
func (o *Token) SetCmcid(v int32) {
	o.Cmcid = &v
}

// GetPricedata returns the Pricedata field value if set, zero value otherwise.
func (o *Token) GetPricedata() TokenPricedata {
	if o == nil || o.Pricedata == nil {
		var ret TokenPricedata
		return ret
	}
	return *o.Pricedata
}

// GetPricedataOk returns a tuple with the Pricedata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetPricedataOk() (*TokenPricedata, bool) {
	if o == nil || o.Pricedata == nil {
		return nil, false
	}
	return o.Pricedata, true
}

// HasPricedata returns a boolean if a field has been set.
func (o *Token) HasPricedata() bool {
	if o != nil && o.Pricedata != nil {
		return true
	}

	return false
}

// SetPricedata gets a reference to the given TokenPricedata and assigns it to the Pricedata field.
func (o *Token) SetPricedata(v TokenPricedata) {
	o.Pricedata = &v
}

// GetPubkey returns the Pubkey field value if set, zero value otherwise.
func (o *Token) GetPubkey() string {
	if o == nil || o.Pubkey == nil {
		var ret string
		return ret
	}
	return *o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetPubkeyOk() (*string, bool) {
	if o == nil || o.Pubkey == nil {
		return nil, false
	}
	return o.Pubkey, true
}

// HasPubkey returns a boolean if a field has been set.
func (o *Token) HasPubkey() bool {
	if o != nil && o.Pubkey != nil {
		return true
	}

	return false
}

// SetPubkey gets a reference to the given string and assigns it to the Pubkey field.
func (o *Token) SetPubkey(v string) {
	o.Pubkey = &v
}

// GetLamports returns the Lamports field value if set, zero value otherwise.
func (o *Token) GetLamports() int64 {
	if o == nil || o.Lamports == nil {
		var ret int64
		return ret
	}
	return *o.Lamports
}

// GetLamportsOk returns a tuple with the Lamports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetLamportsOk() (*int64, bool) {
	if o == nil || o.Lamports == nil {
		return nil, false
	}
	return o.Lamports, true
}

// HasLamports returns a boolean if a field has been set.
func (o *Token) HasLamports() bool {
	if o != nil && o.Lamports != nil {
		return true
	}

	return false
}

// SetLamports gets a reference to the given int64 and assigns it to the Lamports field.
func (o *Token) SetLamports(v int64) {
	o.Lamports = &v
}

// GetSupply returns the Supply field value if set, zero value otherwise.
func (o *Token) GetSupply() int32 {
	if o == nil || o.Supply == nil {
		var ret int32
		return ret
	}
	return *o.Supply
}

// GetSupplyOk returns a tuple with the Supply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetSupplyOk() (*int32, bool) {
	if o == nil || o.Supply == nil {
		return nil, false
	}
	return o.Supply, true
}

// HasSupply returns a boolean if a field has been set.
func (o *Token) HasSupply() bool {
	if o != nil && o.Supply != nil {
		return true
	}

	return false
}

// SetSupply gets a reference to the given int32 and assigns it to the Supply field.
func (o *Token) SetSupply(v int32) {
	o.Supply = &v
}

// GetDecimals returns the Decimals field value if set, zero value otherwise.
func (o *Token) GetDecimals() int32 {
	if o == nil || o.Decimals == nil {
		var ret int32
		return ret
	}
	return *o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetDecimalsOk() (*int32, bool) {
	if o == nil || o.Decimals == nil {
		return nil, false
	}
	return o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *Token) HasDecimals() bool {
	if o != nil && o.Decimals != nil {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given int32 and assigns it to the Decimals field.
func (o *Token) SetDecimals(v int32) {
	o.Decimals = &v
}

// GetInitialized returns the Initialized field value if set, zero value otherwise.
func (o *Token) GetInitialized() bool {
	if o == nil || o.Initialized == nil {
		var ret bool
		return ret
	}
	return *o.Initialized
}

// GetInitializedOk returns a tuple with the Initialized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetInitializedOk() (*bool, bool) {
	if o == nil || o.Initialized == nil {
		return nil, false
	}
	return o.Initialized, true
}

// HasInitialized returns a boolean if a field has been set.
func (o *Token) HasInitialized() bool {
	if o != nil && o.Initialized != nil {
		return true
	}

	return false
}

// SetInitialized gets a reference to the given bool and assigns it to the Initialized field.
func (o *Token) SetInitialized(v bool) {
	o.Initialized = &v
}

// GetHolders returns the Holders field value if set, zero value otherwise.
func (o *Token) GetHolders() int32 {
	if o == nil || o.Holders == nil {
		var ret int32
		return ret
	}
	return *o.Holders
}

// GetHoldersOk returns a tuple with the Holders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetHoldersOk() (*int32, bool) {
	if o == nil || o.Holders == nil {
		return nil, false
	}
	return o.Holders, true
}

// HasHolders returns a boolean if a field has been set.
func (o *Token) HasHolders() bool {
	if o != nil && o.Holders != nil {
		return true
	}

	return false
}

// SetHolders gets a reference to the given int32 and assigns it to the Holders field.
func (o *Token) SetHolders(v int32) {
	o.Holders = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Token) GetMeta() TokenMeta {
	if o == nil || o.Meta == nil {
		var ret TokenMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetMetaOk() (*TokenMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Token) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given TokenMeta and assigns it to the Meta field.
func (o *Token) SetMeta(v TokenMeta) {
	o.Meta = &v
}

// GetOndemand returns the Ondemand field value if set, zero value otherwise.
func (o *Token) GetOndemand() bool {
	if o == nil || o.Ondemand == nil {
		var ret bool
		return ret
	}
	return *o.Ondemand
}

// GetOndemandOk returns a tuple with the Ondemand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Token) GetOndemandOk() (*bool, bool) {
	if o == nil || o.Ondemand == nil {
		return nil, false
	}
	return o.Ondemand, true
}

// HasOndemand returns a boolean if a field has been set.
func (o *Token) HasOndemand() bool {
	if o != nil && o.Ondemand != nil {
		return true
	}

	return false
}

// SetOndemand gets a reference to the given bool and assigns it to the Ondemand field.
func (o *Token) SetOndemand(v bool) {
	o.Ondemand = &v
}

func (o Token) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Ticker != nil {
		toSerialize["ticker"] = o.Ticker
	}
	if o.Logo != nil {
		toSerialize["logo"] = o.Logo
	}
	if o.Cmcid != nil {
		toSerialize["cmcid"] = o.Cmcid
	}
	if o.Pricedata != nil {
		toSerialize["pricedata"] = o.Pricedata
	}
	if o.Pubkey != nil {
		toSerialize["pubkey"] = o.Pubkey
	}
	if o.Lamports != nil {
		toSerialize["lamports"] = o.Lamports
	}
	if o.Supply != nil {
		toSerialize["supply"] = o.Supply
	}
	if o.Decimals != nil {
		toSerialize["decimals"] = o.Decimals
	}
	if o.Initialized != nil {
		toSerialize["initialized"] = o.Initialized
	}
	if o.Holders != nil {
		toSerialize["holders"] = o.Holders
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if o.Ondemand != nil {
		toSerialize["ondemand"] = o.Ondemand
	}
	return json.Marshal(toSerialize)
}

type NullableToken struct {
	value *Token
	isSet bool
}

func (v NullableToken) Get() *Token {
	return v.value
}

func (v *NullableToken) Set(val *Token) {
	v.value = val
	v.isSet = true
}

func (v NullableToken) IsSet() bool {
	return v.isSet
}

func (v *NullableToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToken(val *Token) *NullableToken {
	return &NullableToken{value: val, isSet: true}
}

func (v NullableToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


