/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionAccounts struct for TransactionAccounts
type TransactionAccounts struct {
	Account *Address `json:"account,omitempty"`
	Writable *bool `json:"writable,omitempty"`
	Signer *bool `json:"signer,omitempty"`
	Program *bool `json:"program,omitempty"`
}

// NewTransactionAccounts instantiates a new TransactionAccounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionAccounts() *TransactionAccounts {
	this := TransactionAccounts{}
	return &this
}

// NewTransactionAccountsWithDefaults instantiates a new TransactionAccounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionAccountsWithDefaults() *TransactionAccounts {
	this := TransactionAccounts{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *TransactionAccounts) GetAccount() Address {
	if o == nil || o.Account == nil {
		var ret Address
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAccounts) GetAccountOk() (*Address, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *TransactionAccounts) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given Address and assigns it to the Account field.
func (o *TransactionAccounts) SetAccount(v Address) {
	o.Account = &v
}

// GetWritable returns the Writable field value if set, zero value otherwise.
func (o *TransactionAccounts) GetWritable() bool {
	if o == nil || o.Writable == nil {
		var ret bool
		return ret
	}
	return *o.Writable
}

// GetWritableOk returns a tuple with the Writable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAccounts) GetWritableOk() (*bool, bool) {
	if o == nil || o.Writable == nil {
		return nil, false
	}
	return o.Writable, true
}

// HasWritable returns a boolean if a field has been set.
func (o *TransactionAccounts) HasWritable() bool {
	if o != nil && o.Writable != nil {
		return true
	}

	return false
}

// SetWritable gets a reference to the given bool and assigns it to the Writable field.
func (o *TransactionAccounts) SetWritable(v bool) {
	o.Writable = &v
}

// GetSigner returns the Signer field value if set, zero value otherwise.
func (o *TransactionAccounts) GetSigner() bool {
	if o == nil || o.Signer == nil {
		var ret bool
		return ret
	}
	return *o.Signer
}

// GetSignerOk returns a tuple with the Signer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAccounts) GetSignerOk() (*bool, bool) {
	if o == nil || o.Signer == nil {
		return nil, false
	}
	return o.Signer, true
}

// HasSigner returns a boolean if a field has been set.
func (o *TransactionAccounts) HasSigner() bool {
	if o != nil && o.Signer != nil {
		return true
	}

	return false
}

// SetSigner gets a reference to the given bool and assigns it to the Signer field.
func (o *TransactionAccounts) SetSigner(v bool) {
	o.Signer = &v
}

// GetProgram returns the Program field value if set, zero value otherwise.
func (o *TransactionAccounts) GetProgram() bool {
	if o == nil || o.Program == nil {
		var ret bool
		return ret
	}
	return *o.Program
}

// GetProgramOk returns a tuple with the Program field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAccounts) GetProgramOk() (*bool, bool) {
	if o == nil || o.Program == nil {
		return nil, false
	}
	return o.Program, true
}

// HasProgram returns a boolean if a field has been set.
func (o *TransactionAccounts) HasProgram() bool {
	if o != nil && o.Program != nil {
		return true
	}

	return false
}

// SetProgram gets a reference to the given bool and assigns it to the Program field.
func (o *TransactionAccounts) SetProgram(v bool) {
	o.Program = &v
}

func (o TransactionAccounts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.Writable != nil {
		toSerialize["writable"] = o.Writable
	}
	if o.Signer != nil {
		toSerialize["signer"] = o.Signer
	}
	if o.Program != nil {
		toSerialize["program"] = o.Program
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionAccounts struct {
	value *TransactionAccounts
	isSet bool
}

func (v NullableTransactionAccounts) Get() *TransactionAccounts {
	return v.value
}

func (v *NullableTransactionAccounts) Set(val *TransactionAccounts) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionAccounts) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionAccounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionAccounts(val *TransactionAccounts) *NullableTransactionAccounts {
	return &NullableTransactionAccounts{value: val, isSet: true}
}

func (v NullableTransactionAccounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionAccounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


