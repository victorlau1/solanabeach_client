/*
Solanabeach Backend API

Solanabeach Backend REST API documentation.  ## Rate limiting Current API rate limit per IP is 100 requests per second.    ## Pagination Most of the endpoints returning array data support pagination. The API uses two types of pagination, depending on the returned data. Some endpoints support both, some are limited to just one type.    ## Supported pagination types ### Offset / limit Offset / limit pagination is the simplest form of pagination supported by the API. Offset parameter represents the number of results to skip before returning the data, and the limit parameter limits the number of returned results.   To prevent overloading the API, all limit params have a max value. Each API endpoint has its own max value.  ### Cursor Cursor pagination is more complex than the offset / limit one, but, it comes naturally for some blockchain data (such as blocks, transactions, token transfers, etc). Cursors contain data like blocknumber, transaction index, ... and they're described on their respective API endpoints. Limit parameter works exactly the same way as it does in the offset / limit pagination.  ## Authentication The public API uses a Bearer OAuth authentication method, and the API key should be provided in the `Authorization` header in each request. API keys are issued on request. 

API version: 0.0.1
Contact: andrej@vgng.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Market struct for Market
type Market struct {
	Pubkey *Address `json:"pubkey,omitempty"`
	Basemint *Address `json:"basemint,omitempty"`
	Quotemint *Address `json:"quotemint,omitempty"`
	Meta *MarketMeta `json:"meta,omitempty"`
}

// NewMarket instantiates a new Market object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarket() *Market {
	this := Market{}
	return &this
}

// NewMarketWithDefaults instantiates a new Market object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketWithDefaults() *Market {
	this := Market{}
	return &this
}

// GetPubkey returns the Pubkey field value if set, zero value otherwise.
func (o *Market) GetPubkey() Address {
	if o == nil || o.Pubkey == nil {
		var ret Address
		return ret
	}
	return *o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetPubkeyOk() (*Address, bool) {
	if o == nil || o.Pubkey == nil {
		return nil, false
	}
	return o.Pubkey, true
}

// HasPubkey returns a boolean if a field has been set.
func (o *Market) HasPubkey() bool {
	if o != nil && o.Pubkey != nil {
		return true
	}

	return false
}

// SetPubkey gets a reference to the given Address and assigns it to the Pubkey field.
func (o *Market) SetPubkey(v Address) {
	o.Pubkey = &v
}

// GetBasemint returns the Basemint field value if set, zero value otherwise.
func (o *Market) GetBasemint() Address {
	if o == nil || o.Basemint == nil {
		var ret Address
		return ret
	}
	return *o.Basemint
}

// GetBasemintOk returns a tuple with the Basemint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetBasemintOk() (*Address, bool) {
	if o == nil || o.Basemint == nil {
		return nil, false
	}
	return o.Basemint, true
}

// HasBasemint returns a boolean if a field has been set.
func (o *Market) HasBasemint() bool {
	if o != nil && o.Basemint != nil {
		return true
	}

	return false
}

// SetBasemint gets a reference to the given Address and assigns it to the Basemint field.
func (o *Market) SetBasemint(v Address) {
	o.Basemint = &v
}

// GetQuotemint returns the Quotemint field value if set, zero value otherwise.
func (o *Market) GetQuotemint() Address {
	if o == nil || o.Quotemint == nil {
		var ret Address
		return ret
	}
	return *o.Quotemint
}

// GetQuotemintOk returns a tuple with the Quotemint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetQuotemintOk() (*Address, bool) {
	if o == nil || o.Quotemint == nil {
		return nil, false
	}
	return o.Quotemint, true
}

// HasQuotemint returns a boolean if a field has been set.
func (o *Market) HasQuotemint() bool {
	if o != nil && o.Quotemint != nil {
		return true
	}

	return false
}

// SetQuotemint gets a reference to the given Address and assigns it to the Quotemint field.
func (o *Market) SetQuotemint(v Address) {
	o.Quotemint = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *Market) GetMeta() MarketMeta {
	if o == nil || o.Meta == nil {
		var ret MarketMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Market) GetMetaOk() (*MarketMeta, bool) {
	if o == nil || o.Meta == nil {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *Market) HasMeta() bool {
	if o != nil && o.Meta != nil {
		return true
	}

	return false
}

// SetMeta gets a reference to the given MarketMeta and assigns it to the Meta field.
func (o *Market) SetMeta(v MarketMeta) {
	o.Meta = &v
}

func (o Market) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pubkey != nil {
		toSerialize["pubkey"] = o.Pubkey
	}
	if o.Basemint != nil {
		toSerialize["basemint"] = o.Basemint
	}
	if o.Quotemint != nil {
		toSerialize["quotemint"] = o.Quotemint
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	return json.Marshal(toSerialize)
}

type NullableMarket struct {
	value *Market
	isSet bool
}

func (v NullableMarket) Get() *Market {
	return v.value
}

func (v *NullableMarket) Set(val *Market) {
	v.value = val
	v.isSet = true
}

func (v NullableMarket) IsSet() bool {
	return v.isSet
}

func (v *NullableMarket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarket(val *Market) *NullableMarket {
	return &NullableMarket{value: val, isSet: true}
}

func (v NullableMarket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


